<?php

namespace Nogrod\eBaySDK\MerchantData;

use Nogrod\XMLClientRuntime\Func;

/**
 * Class representing SKUDetailsType
 *
 * Describes or includes information associated with the SKU.
 * XSD Type: SKUDetailsType
 */
class SKUDetailsType implements \Sabre\Xml\XmlSerializable, \Sabre\Xml\XmlDeserializable
{
    /**
     * Stock Keeping Unit that serves as a unique identifier for an item.
     *  Many merchants assign a SKU number to an item of a specific type,
     *  size, and color. This way, they can keep track of how many products
     *  of each type, size, and color are selling, and they can re-stock
     *  their shelves according to customer demand. <br>
     *  <br>
     *  You can include a SKU when you list any item, and then use the SKU
     *  instead of (or in addition to) using the ItemID to track your
     *  inventory on eBay.<br>
     *  <br>
     *  For fixed-price items, if you set Item.InventoryTrackingmethod to
     *  SKU, you can use the SKU instead of ItemID as a unique ID when you
     *  revise the listing.<br>
     *  <br>
     *  Only returned when the listing included a SKU.
     *
     * @var string $sKU
     */
    private $sKU = null;

    /**
     * The price that the seller assigns to the item. If this value
     *  changes when the item is revised, the new value becomes the price.
     *  For a multi-variation listing, price is only returned at
     *  the variation level. <br>
     *  <br>
     *  You can revise this value using ReviseFixedPriceItem or ReviseInventoryStatus in the Trading API.
     *
     * @var \Nogrod\eBaySDK\MerchantData\AmountType $price
     */
    private $price = null;

    /**
     * The total number of items available for sale in the listing.
     *  For a multi-variation listing, the item quantity for each variation
     *  is returned at the variation level.
     *  <br>
     *  You can revise this value using ReviseFixedPriceItem or ReviseInventoryStatus in the Trading API.
     *
     * @var int $quantity
     */
    private $quantity = null;

    /**
     * The ID that uniquely identifies the item listing.
     *  The ID is generated by eBay after an item is listed.
     *  You cannot choose or revise this value.
     *
     * @var string $itemID
     */
    private $itemID = null;

    /**
     * Number of bids placed so far for the item.
     *  Returned only for auction-style listings if auctionItemDetails.includeBidCount has
     *  a value of true in the activeInventoryReportFilter of a Bulk Data Exchange Service
     *  startDownloadJob request.
     *  <br><br>
     *  See <a href="https://developer.ebay.com/DevZone/bulk-data-exchange/CallRef/startDownloadJob.html#Request.downloadRequestFilter.activeInventoryReportFilter" target="_blank">activeInventoryReportFilter</a>
     *
     * @var int $bidCount
     */
    private $bidCount = null;

    /**
     * Indicates whether the Reserve Price has been met for the listing.
     *  Returned only for auction-style listings if auctionItemDetails.includeReservePrice has
     *  a value of true in the activeInventoryReportFilter of a Bulk Data Exchange Service
     *  startDownloadJob request.
     *  <br><br>
     *  See <a href="https://developer.ebay.com/DevZone/bulk-data-exchange/CallRef/startDownloadJob.html#Request.downloadRequestFilter.activeInventoryReportFilter" target="_blank">activeInventoryReportFilter</a>
     *
     * @var bool $reserveMet
     */
    private $reserveMet = null;

    /**
     * Variations are multiple similar (but not identical) items in one
     *  fixed-price listing. For example, a clothing listing can
     *  contain items of the same brand that vary by color and size.
     *  Each variation specifies a combination of one of these
     *  colors and sizes. Each variation can have a different
     *  quantity and price.
     *
     * @var \Nogrod\eBaySDK\MerchantData\MerchantDataVariationType[] $variations
     */
    private $variations = null;

    /**
     * Gets as sKU
     *
     * Stock Keeping Unit that serves as a unique identifier for an item.
     *  Many merchants assign a SKU number to an item of a specific type,
     *  size, and color. This way, they can keep track of how many products
     *  of each type, size, and color are selling, and they can re-stock
     *  their shelves according to customer demand. <br>
     *  <br>
     *  You can include a SKU when you list any item, and then use the SKU
     *  instead of (or in addition to) using the ItemID to track your
     *  inventory on eBay.<br>
     *  <br>
     *  For fixed-price items, if you set Item.InventoryTrackingmethod to
     *  SKU, you can use the SKU instead of ItemID as a unique ID when you
     *  revise the listing.<br>
     *  <br>
     *  Only returned when the listing included a SKU.
     *
     * @return string
     */
    public function getSKU()
    {
        return $this->sKU;
    }

    /**
     * Sets a new sKU
     *
     * Stock Keeping Unit that serves as a unique identifier for an item.
     *  Many merchants assign a SKU number to an item of a specific type,
     *  size, and color. This way, they can keep track of how many products
     *  of each type, size, and color are selling, and they can re-stock
     *  their shelves according to customer demand. <br>
     *  <br>
     *  You can include a SKU when you list any item, and then use the SKU
     *  instead of (or in addition to) using the ItemID to track your
     *  inventory on eBay.<br>
     *  <br>
     *  For fixed-price items, if you set Item.InventoryTrackingmethod to
     *  SKU, you can use the SKU instead of ItemID as a unique ID when you
     *  revise the listing.<br>
     *  <br>
     *  Only returned when the listing included a SKU.
     *
     * @param string $sKU
     * @return self
     */
    public function setSKU($sKU)
    {
        $this->sKU = $sKU;
        return $this;
    }

    /**
     * Gets as price
     *
     * The price that the seller assigns to the item. If this value
     *  changes when the item is revised, the new value becomes the price.
     *  For a multi-variation listing, price is only returned at
     *  the variation level. <br>
     *  <br>
     *  You can revise this value using ReviseFixedPriceItem or ReviseInventoryStatus in the Trading API.
     *
     * @return \Nogrod\eBaySDK\MerchantData\AmountType
     */
    public function getPrice()
    {
        return $this->price;
    }

    /**
     * Sets a new price
     *
     * The price that the seller assigns to the item. If this value
     *  changes when the item is revised, the new value becomes the price.
     *  For a multi-variation listing, price is only returned at
     *  the variation level. <br>
     *  <br>
     *  You can revise this value using ReviseFixedPriceItem or ReviseInventoryStatus in the Trading API.
     *
     * @param \Nogrod\eBaySDK\MerchantData\AmountType $price
     * @return self
     */
    public function setPrice(\Nogrod\eBaySDK\MerchantData\AmountType $price)
    {
        $this->price = $price;
        return $this;
    }

    /**
     * Gets as quantity
     *
     * The total number of items available for sale in the listing.
     *  For a multi-variation listing, the item quantity for each variation
     *  is returned at the variation level.
     *  <br>
     *  You can revise this value using ReviseFixedPriceItem or ReviseInventoryStatus in the Trading API.
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->quantity;
    }

    /**
     * Sets a new quantity
     *
     * The total number of items available for sale in the listing.
     *  For a multi-variation listing, the item quantity for each variation
     *  is returned at the variation level.
     *  <br>
     *  You can revise this value using ReviseFixedPriceItem or ReviseInventoryStatus in the Trading API.
     *
     * @param int $quantity
     * @return self
     */
    public function setQuantity($quantity)
    {
        $this->quantity = $quantity;
        return $this;
    }

    /**
     * Gets as itemID
     *
     * The ID that uniquely identifies the item listing.
     *  The ID is generated by eBay after an item is listed.
     *  You cannot choose or revise this value.
     *
     * @return string
     */
    public function getItemID()
    {
        return $this->itemID;
    }

    /**
     * Sets a new itemID
     *
     * The ID that uniquely identifies the item listing.
     *  The ID is generated by eBay after an item is listed.
     *  You cannot choose or revise this value.
     *
     * @param string $itemID
     * @return self
     */
    public function setItemID($itemID)
    {
        $this->itemID = $itemID;
        return $this;
    }

    /**
     * Gets as bidCount
     *
     * Number of bids placed so far for the item.
     *  Returned only for auction-style listings if auctionItemDetails.includeBidCount has
     *  a value of true in the activeInventoryReportFilter of a Bulk Data Exchange Service
     *  startDownloadJob request.
     *  <br><br>
     *  See <a href="https://developer.ebay.com/DevZone/bulk-data-exchange/CallRef/startDownloadJob.html#Request.downloadRequestFilter.activeInventoryReportFilter" target="_blank">activeInventoryReportFilter</a>
     *
     * @return int
     */
    public function getBidCount()
    {
        return $this->bidCount;
    }

    /**
     * Sets a new bidCount
     *
     * Number of bids placed so far for the item.
     *  Returned only for auction-style listings if auctionItemDetails.includeBidCount has
     *  a value of true in the activeInventoryReportFilter of a Bulk Data Exchange Service
     *  startDownloadJob request.
     *  <br><br>
     *  See <a href="https://developer.ebay.com/DevZone/bulk-data-exchange/CallRef/startDownloadJob.html#Request.downloadRequestFilter.activeInventoryReportFilter" target="_blank">activeInventoryReportFilter</a>
     *
     * @param int $bidCount
     * @return self
     */
    public function setBidCount($bidCount)
    {
        $this->bidCount = $bidCount;
        return $this;
    }

    /**
     * Gets as reserveMet
     *
     * Indicates whether the Reserve Price has been met for the listing.
     *  Returned only for auction-style listings if auctionItemDetails.includeReservePrice has
     *  a value of true in the activeInventoryReportFilter of a Bulk Data Exchange Service
     *  startDownloadJob request.
     *  <br><br>
     *  See <a href="https://developer.ebay.com/DevZone/bulk-data-exchange/CallRef/startDownloadJob.html#Request.downloadRequestFilter.activeInventoryReportFilter" target="_blank">activeInventoryReportFilter</a>
     *
     * @return bool
     */
    public function getReserveMet()
    {
        return $this->reserveMet;
    }

    /**
     * Sets a new reserveMet
     *
     * Indicates whether the Reserve Price has been met for the listing.
     *  Returned only for auction-style listings if auctionItemDetails.includeReservePrice has
     *  a value of true in the activeInventoryReportFilter of a Bulk Data Exchange Service
     *  startDownloadJob request.
     *  <br><br>
     *  See <a href="https://developer.ebay.com/DevZone/bulk-data-exchange/CallRef/startDownloadJob.html#Request.downloadRequestFilter.activeInventoryReportFilter" target="_blank">activeInventoryReportFilter</a>
     *
     * @param bool $reserveMet
     * @return self
     */
    public function setReserveMet($reserveMet)
    {
        $this->reserveMet = $reserveMet;
        return $this;
    }

    /**
     * Adds as variation
     *
     * Variations are multiple similar (but not identical) items in one
     *  fixed-price listing. For example, a clothing listing can
     *  contain items of the same brand that vary by color and size.
     *  Each variation specifies a combination of one of these
     *  colors and sizes. Each variation can have a different
     *  quantity and price.
     *
     * @return self
     * @param \Nogrod\eBaySDK\MerchantData\MerchantDataVariationType $variation
     */
    public function addToVariations(\Nogrod\eBaySDK\MerchantData\MerchantDataVariationType $variation)
    {
        $this->variations[] = $variation;
        return $this;
    }

    /**
     * isset variations
     *
     * Variations are multiple similar (but not identical) items in one
     *  fixed-price listing. For example, a clothing listing can
     *  contain items of the same brand that vary by color and size.
     *  Each variation specifies a combination of one of these
     *  colors and sizes. Each variation can have a different
     *  quantity and price.
     *
     * @param int|string $index
     * @return bool
     */
    public function issetVariations($index)
    {
        return isset($this->variations[$index]);
    }

    /**
     * unset variations
     *
     * Variations are multiple similar (but not identical) items in one
     *  fixed-price listing. For example, a clothing listing can
     *  contain items of the same brand that vary by color and size.
     *  Each variation specifies a combination of one of these
     *  colors and sizes. Each variation can have a different
     *  quantity and price.
     *
     * @param int|string $index
     * @return void
     */
    public function unsetVariations($index)
    {
        unset($this->variations[$index]);
    }

    /**
     * Gets as variations
     *
     * Variations are multiple similar (but not identical) items in one
     *  fixed-price listing. For example, a clothing listing can
     *  contain items of the same brand that vary by color and size.
     *  Each variation specifies a combination of one of these
     *  colors and sizes. Each variation can have a different
     *  quantity and price.
     *
     * @return \Nogrod\eBaySDK\MerchantData\MerchantDataVariationType[]
     */
    public function getVariations()
    {
        return $this->variations;
    }

    /**
     * Sets a new variations
     *
     * Variations are multiple similar (but not identical) items in one
     *  fixed-price listing. For example, a clothing listing can
     *  contain items of the same brand that vary by color and size.
     *  Each variation specifies a combination of one of these
     *  colors and sizes. Each variation can have a different
     *  quantity and price.
     *
     * @param \Nogrod\eBaySDK\MerchantData\MerchantDataVariationType[] $variations
     * @return self
     */
    public function setVariations(array $variations)
    {
        $this->variations = $variations;
        return $this;
    }

    public function xmlSerialize(\Sabre\Xml\Writer $writer)
    {
        $writer->writeAttribute("xmlns", "urn:ebay:apis:eBLBaseComponents");
        $value = $this->getSKU();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}SKU", $value);
        }
        $value = $this->getPrice();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}Price", $value);
        }
        $value = $this->getQuantity();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}Quantity", $value);
        }
        $value = $this->getItemID();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}ItemID", $value);
        }
        $value = $this->getBidCount();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}BidCount", $value);
        }
        $value = $this->getReserveMet();
        $value = null !== $value ? ($value ? 'true' : 'false') : null;
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}ReserveMet", $value);
        }
        $value = $this->getVariations();
        if (null !== $value && !empty($this->getVariations())) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}Variations", array_map(function ($v) {
                return ["Variation" => $v];
            }, $value));
        }
    }

    public static function xmlDeserialize(\Sabre\Xml\Reader $reader)
    {
        return self::fromKeyValue($reader->parseInnerTree([]));
    }

    public static function fromKeyValue($keyValue)
    {
        $self = new self();
        $self->setKeyValue($keyValue);
        return $self;
    }

    public function setKeyValue($keyValue)
    {
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}SKU');
        if (null !== $value) {
            $this->setSKU($value);
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}Price');
        if (null !== $value) {
            $this->setPrice(\Nogrod\eBaySDK\MerchantData\AmountType::fromKeyValue($value));
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}Quantity');
        if (null !== $value) {
            $this->setQuantity($value);
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}ItemID');
        if (null !== $value) {
            $this->setItemID($value);
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}BidCount');
        if (null !== $value) {
            $this->setBidCount($value);
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}ReserveMet');
        if (null !== $value) {
            $this->setReserveMet($value);
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}Variations', true);
        if (null !== $value && !empty($value)) {
            $this->setVariations(array_map(function ($v) {
                return \Nogrod\eBaySDK\MerchantData\MerchantDataVariationType::fromKeyValue($v);
            }, $value));
        }
    }
}
