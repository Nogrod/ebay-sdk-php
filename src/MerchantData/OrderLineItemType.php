<?php

namespace Nogrod\eBaySDK\MerchantData;

use Nogrod\XMLClientRuntime\Func;

/**
 * Class representing OrderLineItemType
 *
 * Specifics for the sale data for a single SKU or item.
 * XSD Type: OrderLineItemType
 */
class OrderLineItemType implements \Sabre\Xml\XmlSerializable, \Sabre\Xml\XmlDeserializable
{
    /**
     * An ID that uniquely identifies each line item within an order. If the buyer only
     *  purchased one item, there will be one Order ID and one Order Line Item ID. If a
     *  buyer purchases multiple items, there will be one Order ID and multiple Order Line Item IDs.
     *  <br><br>
     *  OrderLineItemID is a based upon the combination of the eBay Trading API's ItemID and
     *  TransactionID fields. The number before the hyphen is the Item ID and the number after the hyphen
     *  is the Transaction ID. The Transaction field in the Trading API is a container that can include
     *  many types of order line item (transaction) information.
     *  <br><br>
     *  See <a href="https://developer.ebay.com/DevZone/XML/docs/Reference/eBay/GetSellerTransactions.html#Response.TransactionArray.Transaction.TransactionID" target="_blank">Trading API</a>
     *  for more information.
     *
     * @var string $orderLineItemID
     */
    private $orderLineItemID = null;

    /**
     * The date time when the transaction occur.
     *
     * @var \DateTime $transactionTime
     */
    private $transactionTime = null;

    /**
     * Applicable for adjustment, the original transaction occurs date time.
     *
     * @var \DateTime $originalChargeTime
     */
    private $originalChargeTime = null;

    /**
     * The ID that uniquely identifies the item listing. The ID is generated by eBay after an item is listed. You cannot choose or revise this value.
     *
     * @var string $itemID
     */
    private $itemID = null;

    /**
     * Title of the item listing.
     *
     * @var string $itemTitle
     */
    private $itemTitle = null;

    /**
     * Serial number for this item, only applicable for motors.
     *
     * @var string $serialNumber
     */
    private $serialNumber = null;

    /**
     * Stock Keeping Unit that serves as a unique identifier for an item. Many
     *  merchants assign a SKU number to an item of a specific type, size, and
     *  color. This way, they can keep track of how many products of each type,
     *  size, and color are selling, and they can re-stock their shelves according
     *  to customer demand. You can use SKU numbers to add Fixed Price Items and to
     *  keep track of your eBay inventory, instead of (or in addition to) the Item
     *  ID.
     *
     * @var string $sKU
     */
    private $sKU = null;

    /**
     * Description of the category used.
     *
     * @var string $globalCategoryDescription
     */
    private $globalCategoryDescription = null;

    /**
     * Site description for the site where the listing occurred.
     *
     * @var string $siteDescription
     */
    private $siteDescription = null;

    /**
     * The number of items sold to a specific buyer within a single order line item
     *  (transaction).
     *
     * @var int $quantitySold
     */
    private $quantitySold = null;

    /**
     * Price of the item.
     *
     * @var \Nogrod\eBaySDK\MerchantData\AmountType $salePrice
     */
    private $salePrice = null;

    /**
     * Calculated tax fee based on the sale price and the sales tax at the buyer's location.
     *
     * @var \Nogrod\eBaySDK\MerchantData\AmountType $taxAmount
     */
    private $taxAmount = null;

    /**
     * Calculated shipping cost based on item weight, buyer's postal code, and shipping service.
     *
     * @var \Nogrod\eBaySDK\MerchantData\AmountType $shippingCost
     */
    private $shippingCost = null;

    /**
     * The total cost of the order line item, which includes the sale price of all order line items, shipping costs, and taxes. If multiple order line items between the same buyer and seller have been combined into a Combined Payment order, the <b>TotalCost</b> value returned for each order line item reflects the amount paid for the Combined Payment order and not the individual order line item.
     *  <br><br>
     *  <span class="tablenote"><b>Note: </b> As of November 2019, for orders subject to eBay 'Collect and Remit' taxes, PayPal has begun distributing order funds to the seller's account with the sales tax included. eBay 'Collect and Remit' tax includes US sales tax for numerous states, and 'Good and Services' tax that is applicable to Australian and New Zealand sellers. This 'Collect and Remit' tax amount for each order line item will be included in the <b>TotalCost</b> value. To determine if 'Collect and Remit' taxes were added into <b>TotalCost</b> value, the user can check for the <b>TotalIncludeseBayCollectedTax</b> boolean value. If this value is returned as <code>true</code>, the tax amount shown in the <b>Taxes.TaxDetails.TaxAmount</b> field for each order line item is reflected in the <b>TotalCost</b> value.
     *  <br><br>
     *  Sellers should be aware that the sales tax that the buyer pays for the order will initially be included when the order funds are distributed to their PayPal account, but that PayPal will pull out the sales tax amount shortly after the payment clears, and will distribute the sales tax to the appropriate taxing authority. Previous to this change, PayPal would strip out the 'Collect and Remit' tax before distributing order funds to the seller's account.
     *  <br><br>
     *  This logic change does not apply to sellers who are in eBay managed payments, so the amount in this field will never reflect any 'Collect and Remit' tax, even if the order is subject to 'Collect and Remit' tax.
     *  </span>
     *
     * @var \Nogrod\eBaySDK\MerchantData\AmountType $totalCost
     */
    private $totalCost = null;

    /**
     * This boolean field is returned as <code>true</code> if the <b>TotalCost</b> value (for the line item) includes eBay 'Collect and Remit' taxes. eBay 'Collect and Remit' taxes include US state-mandated sales tax and 'Goods and Services' taxes that are applicable to orders from Australian and New Zealand sellers.
     *  <br><br>
     *  More and more US states are mandating the collection of sales tax for Internet sales. For a full list of affected states and effective dates, see the <a href="https://www.ebay.com/help/selling/fees-credits-invoices/taxes-import-charges?id=4121" target="_blank">eBay sales tax collection</a> help page.
     *  <br><br>
     *  For eBay managed payment orders, this field should always be returned as <code>false</code>, since eBay will always strip out any applicable sales tax (and remit to taxing authority) before the seller payout for the order line item is distributed to the seller's account.
     *  <br><br>
     *  <span class="tablenote"><b>Note: </b> As of November 2019, for orders subject to eBay 'Collect and Remit' taxes, PayPal has begun distributing order funds to the seller's account with the sales tax included. However, shortly after the order funds clear in the seller's account, the 'Collect and Remit' tax amount will be pulled by PayPal from the seller's account and then disributed to the appropriate taxing authority. Previously, PayPal was stripping this 'Collect and Remit' tax from the buyer's payment and directly submitting this amount to the appropriate taxing authority, and this tax amount never shows up in the sellers account.
     *  </span>
     *
     * @var bool $totalIncludeseBayCollectedTax
     */
    private $totalIncludeseBayCollectedTax = null;

    /**
     * The date and time that the payment was acknowledged.
     *
     * @var \DateTime $paymentClearedTime
     */
    private $paymentClearedTime = null;

    /**
     * Cost of insuring the delivery of this order with the courier.
     *
     * @var \Nogrod\eBaySDK\MerchantData\AmountType $insuranceCost
     */
    private $insuranceCost = null;

    /**
     * eBay site where the seller is registered.
     *
     * @var int $listingSiteID
     */
    private $listingSiteID = null;

    /**
     * The date and time that the item was sold.
     *
     * @var \DateTime $saleTime
     */
    private $saleTime = null;

    /**
     * Notes for this transaction.
     *
     * @var string $memo
     */
    private $memo = null;

    /**
     * Second description of the item sold.
     *
     * @var string $secondDescription
     */
    private $secondDescription = null;

    /**
     * Description of the fee type.
     *
     * @var string $feeDescription
     */
    private $feeDescription = null;

    /**
     * Fee Amount for a certain Fee type.
     *
     * @var \Nogrod\eBaySDK\MerchantData\AmountType $feeAmount
     */
    private $feeAmount = null;

    /**
     * Gets as orderLineItemID
     *
     * An ID that uniquely identifies each line item within an order. If the buyer only
     *  purchased one item, there will be one Order ID and one Order Line Item ID. If a
     *  buyer purchases multiple items, there will be one Order ID and multiple Order Line Item IDs.
     *  <br><br>
     *  OrderLineItemID is a based upon the combination of the eBay Trading API's ItemID and
     *  TransactionID fields. The number before the hyphen is the Item ID and the number after the hyphen
     *  is the Transaction ID. The Transaction field in the Trading API is a container that can include
     *  many types of order line item (transaction) information.
     *  <br><br>
     *  See <a href="https://developer.ebay.com/DevZone/XML/docs/Reference/eBay/GetSellerTransactions.html#Response.TransactionArray.Transaction.TransactionID" target="_blank">Trading API</a>
     *  for more information.
     *
     * @return string
     */
    public function getOrderLineItemID()
    {
        return $this->orderLineItemID;
    }

    /**
     * Sets a new orderLineItemID
     *
     * An ID that uniquely identifies each line item within an order. If the buyer only
     *  purchased one item, there will be one Order ID and one Order Line Item ID. If a
     *  buyer purchases multiple items, there will be one Order ID and multiple Order Line Item IDs.
     *  <br><br>
     *  OrderLineItemID is a based upon the combination of the eBay Trading API's ItemID and
     *  TransactionID fields. The number before the hyphen is the Item ID and the number after the hyphen
     *  is the Transaction ID. The Transaction field in the Trading API is a container that can include
     *  many types of order line item (transaction) information.
     *  <br><br>
     *  See <a href="https://developer.ebay.com/DevZone/XML/docs/Reference/eBay/GetSellerTransactions.html#Response.TransactionArray.Transaction.TransactionID" target="_blank">Trading API</a>
     *  for more information.
     *
     * @param string $orderLineItemID
     * @return self
     */
    public function setOrderLineItemID($orderLineItemID)
    {
        $this->orderLineItemID = $orderLineItemID;
        return $this;
    }

    /**
     * Gets as transactionTime
     *
     * The date time when the transaction occur.
     *
     * @return \DateTime
     */
    public function getTransactionTime()
    {
        return $this->transactionTime;
    }

    /**
     * Sets a new transactionTime
     *
     * The date time when the transaction occur.
     *
     * @param \DateTime $transactionTime
     * @return self
     */
    public function setTransactionTime(\DateTime $transactionTime)
    {
        $this->transactionTime = $transactionTime;
        return $this;
    }

    /**
     * Gets as originalChargeTime
     *
     * Applicable for adjustment, the original transaction occurs date time.
     *
     * @return \DateTime
     */
    public function getOriginalChargeTime()
    {
        return $this->originalChargeTime;
    }

    /**
     * Sets a new originalChargeTime
     *
     * Applicable for adjustment, the original transaction occurs date time.
     *
     * @param \DateTime $originalChargeTime
     * @return self
     */
    public function setOriginalChargeTime(\DateTime $originalChargeTime)
    {
        $this->originalChargeTime = $originalChargeTime;
        return $this;
    }

    /**
     * Gets as itemID
     *
     * The ID that uniquely identifies the item listing. The ID is generated by eBay after an item is listed. You cannot choose or revise this value.
     *
     * @return string
     */
    public function getItemID()
    {
        return $this->itemID;
    }

    /**
     * Sets a new itemID
     *
     * The ID that uniquely identifies the item listing. The ID is generated by eBay after an item is listed. You cannot choose or revise this value.
     *
     * @param string $itemID
     * @return self
     */
    public function setItemID($itemID)
    {
        $this->itemID = $itemID;
        return $this;
    }

    /**
     * Gets as itemTitle
     *
     * Title of the item listing.
     *
     * @return string
     */
    public function getItemTitle()
    {
        return $this->itemTitle;
    }

    /**
     * Sets a new itemTitle
     *
     * Title of the item listing.
     *
     * @param string $itemTitle
     * @return self
     */
    public function setItemTitle($itemTitle)
    {
        $this->itemTitle = $itemTitle;
        return $this;
    }

    /**
     * Gets as serialNumber
     *
     * Serial number for this item, only applicable for motors.
     *
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->serialNumber;
    }

    /**
     * Sets a new serialNumber
     *
     * Serial number for this item, only applicable for motors.
     *
     * @param string $serialNumber
     * @return self
     */
    public function setSerialNumber($serialNumber)
    {
        $this->serialNumber = $serialNumber;
        return $this;
    }

    /**
     * Gets as sKU
     *
     * Stock Keeping Unit that serves as a unique identifier for an item. Many
     *  merchants assign a SKU number to an item of a specific type, size, and
     *  color. This way, they can keep track of how many products of each type,
     *  size, and color are selling, and they can re-stock their shelves according
     *  to customer demand. You can use SKU numbers to add Fixed Price Items and to
     *  keep track of your eBay inventory, instead of (or in addition to) the Item
     *  ID.
     *
     * @return string
     */
    public function getSKU()
    {
        return $this->sKU;
    }

    /**
     * Sets a new sKU
     *
     * Stock Keeping Unit that serves as a unique identifier for an item. Many
     *  merchants assign a SKU number to an item of a specific type, size, and
     *  color. This way, they can keep track of how many products of each type,
     *  size, and color are selling, and they can re-stock their shelves according
     *  to customer demand. You can use SKU numbers to add Fixed Price Items and to
     *  keep track of your eBay inventory, instead of (or in addition to) the Item
     *  ID.
     *
     * @param string $sKU
     * @return self
     */
    public function setSKU($sKU)
    {
        $this->sKU = $sKU;
        return $this;
    }

    /**
     * Gets as globalCategoryDescription
     *
     * Description of the category used.
     *
     * @return string
     */
    public function getGlobalCategoryDescription()
    {
        return $this->globalCategoryDescription;
    }

    /**
     * Sets a new globalCategoryDescription
     *
     * Description of the category used.
     *
     * @param string $globalCategoryDescription
     * @return self
     */
    public function setGlobalCategoryDescription($globalCategoryDescription)
    {
        $this->globalCategoryDescription = $globalCategoryDescription;
        return $this;
    }

    /**
     * Gets as siteDescription
     *
     * Site description for the site where the listing occurred.
     *
     * @return string
     */
    public function getSiteDescription()
    {
        return $this->siteDescription;
    }

    /**
     * Sets a new siteDescription
     *
     * Site description for the site where the listing occurred.
     *
     * @param string $siteDescription
     * @return self
     */
    public function setSiteDescription($siteDescription)
    {
        $this->siteDescription = $siteDescription;
        return $this;
    }

    /**
     * Gets as quantitySold
     *
     * The number of items sold to a specific buyer within a single order line item
     *  (transaction).
     *
     * @return int
     */
    public function getQuantitySold()
    {
        return $this->quantitySold;
    }

    /**
     * Sets a new quantitySold
     *
     * The number of items sold to a specific buyer within a single order line item
     *  (transaction).
     *
     * @param int $quantitySold
     * @return self
     */
    public function setQuantitySold($quantitySold)
    {
        $this->quantitySold = $quantitySold;
        return $this;
    }

    /**
     * Gets as salePrice
     *
     * Price of the item.
     *
     * @return \Nogrod\eBaySDK\MerchantData\AmountType
     */
    public function getSalePrice()
    {
        return $this->salePrice;
    }

    /**
     * Sets a new salePrice
     *
     * Price of the item.
     *
     * @param \Nogrod\eBaySDK\MerchantData\AmountType $salePrice
     * @return self
     */
    public function setSalePrice(\Nogrod\eBaySDK\MerchantData\AmountType $salePrice)
    {
        $this->salePrice = $salePrice;
        return $this;
    }

    /**
     * Gets as taxAmount
     *
     * Calculated tax fee based on the sale price and the sales tax at the buyer's location.
     *
     * @return \Nogrod\eBaySDK\MerchantData\AmountType
     */
    public function getTaxAmount()
    {
        return $this->taxAmount;
    }

    /**
     * Sets a new taxAmount
     *
     * Calculated tax fee based on the sale price and the sales tax at the buyer's location.
     *
     * @param \Nogrod\eBaySDK\MerchantData\AmountType $taxAmount
     * @return self
     */
    public function setTaxAmount(\Nogrod\eBaySDK\MerchantData\AmountType $taxAmount)
    {
        $this->taxAmount = $taxAmount;
        return $this;
    }

    /**
     * Gets as shippingCost
     *
     * Calculated shipping cost based on item weight, buyer's postal code, and shipping service.
     *
     * @return \Nogrod\eBaySDK\MerchantData\AmountType
     */
    public function getShippingCost()
    {
        return $this->shippingCost;
    }

    /**
     * Sets a new shippingCost
     *
     * Calculated shipping cost based on item weight, buyer's postal code, and shipping service.
     *
     * @param \Nogrod\eBaySDK\MerchantData\AmountType $shippingCost
     * @return self
     */
    public function setShippingCost(\Nogrod\eBaySDK\MerchantData\AmountType $shippingCost)
    {
        $this->shippingCost = $shippingCost;
        return $this;
    }

    /**
     * Gets as totalCost
     *
     * The total cost of the order line item, which includes the sale price of all order line items, shipping costs, and taxes. If multiple order line items between the same buyer and seller have been combined into a Combined Payment order, the <b>TotalCost</b> value returned for each order line item reflects the amount paid for the Combined Payment order and not the individual order line item.
     *  <br><br>
     *  <span class="tablenote"><b>Note: </b> As of November 2019, for orders subject to eBay 'Collect and Remit' taxes, PayPal has begun distributing order funds to the seller's account with the sales tax included. eBay 'Collect and Remit' tax includes US sales tax for numerous states, and 'Good and Services' tax that is applicable to Australian and New Zealand sellers. This 'Collect and Remit' tax amount for each order line item will be included in the <b>TotalCost</b> value. To determine if 'Collect and Remit' taxes were added into <b>TotalCost</b> value, the user can check for the <b>TotalIncludeseBayCollectedTax</b> boolean value. If this value is returned as <code>true</code>, the tax amount shown in the <b>Taxes.TaxDetails.TaxAmount</b> field for each order line item is reflected in the <b>TotalCost</b> value.
     *  <br><br>
     *  Sellers should be aware that the sales tax that the buyer pays for the order will initially be included when the order funds are distributed to their PayPal account, but that PayPal will pull out the sales tax amount shortly after the payment clears, and will distribute the sales tax to the appropriate taxing authority. Previous to this change, PayPal would strip out the 'Collect and Remit' tax before distributing order funds to the seller's account.
     *  <br><br>
     *  This logic change does not apply to sellers who are in eBay managed payments, so the amount in this field will never reflect any 'Collect and Remit' tax, even if the order is subject to 'Collect and Remit' tax.
     *  </span>
     *
     * @return \Nogrod\eBaySDK\MerchantData\AmountType
     */
    public function getTotalCost()
    {
        return $this->totalCost;
    }

    /**
     * Sets a new totalCost
     *
     * The total cost of the order line item, which includes the sale price of all order line items, shipping costs, and taxes. If multiple order line items between the same buyer and seller have been combined into a Combined Payment order, the <b>TotalCost</b> value returned for each order line item reflects the amount paid for the Combined Payment order and not the individual order line item.
     *  <br><br>
     *  <span class="tablenote"><b>Note: </b> As of November 2019, for orders subject to eBay 'Collect and Remit' taxes, PayPal has begun distributing order funds to the seller's account with the sales tax included. eBay 'Collect and Remit' tax includes US sales tax for numerous states, and 'Good and Services' tax that is applicable to Australian and New Zealand sellers. This 'Collect and Remit' tax amount for each order line item will be included in the <b>TotalCost</b> value. To determine if 'Collect and Remit' taxes were added into <b>TotalCost</b> value, the user can check for the <b>TotalIncludeseBayCollectedTax</b> boolean value. If this value is returned as <code>true</code>, the tax amount shown in the <b>Taxes.TaxDetails.TaxAmount</b> field for each order line item is reflected in the <b>TotalCost</b> value.
     *  <br><br>
     *  Sellers should be aware that the sales tax that the buyer pays for the order will initially be included when the order funds are distributed to their PayPal account, but that PayPal will pull out the sales tax amount shortly after the payment clears, and will distribute the sales tax to the appropriate taxing authority. Previous to this change, PayPal would strip out the 'Collect and Remit' tax before distributing order funds to the seller's account.
     *  <br><br>
     *  This logic change does not apply to sellers who are in eBay managed payments, so the amount in this field will never reflect any 'Collect and Remit' tax, even if the order is subject to 'Collect and Remit' tax.
     *  </span>
     *
     * @param \Nogrod\eBaySDK\MerchantData\AmountType $totalCost
     * @return self
     */
    public function setTotalCost(\Nogrod\eBaySDK\MerchantData\AmountType $totalCost)
    {
        $this->totalCost = $totalCost;
        return $this;
    }

    /**
     * Gets as totalIncludeseBayCollectedTax
     *
     * This boolean field is returned as <code>true</code> if the <b>TotalCost</b> value (for the line item) includes eBay 'Collect and Remit' taxes. eBay 'Collect and Remit' taxes include US state-mandated sales tax and 'Goods and Services' taxes that are applicable to orders from Australian and New Zealand sellers.
     *  <br><br>
     *  More and more US states are mandating the collection of sales tax for Internet sales. For a full list of affected states and effective dates, see the <a href="https://www.ebay.com/help/selling/fees-credits-invoices/taxes-import-charges?id=4121" target="_blank">eBay sales tax collection</a> help page.
     *  <br><br>
     *  For eBay managed payment orders, this field should always be returned as <code>false</code>, since eBay will always strip out any applicable sales tax (and remit to taxing authority) before the seller payout for the order line item is distributed to the seller's account.
     *  <br><br>
     *  <span class="tablenote"><b>Note: </b> As of November 2019, for orders subject to eBay 'Collect and Remit' taxes, PayPal has begun distributing order funds to the seller's account with the sales tax included. However, shortly after the order funds clear in the seller's account, the 'Collect and Remit' tax amount will be pulled by PayPal from the seller's account and then disributed to the appropriate taxing authority. Previously, PayPal was stripping this 'Collect and Remit' tax from the buyer's payment and directly submitting this amount to the appropriate taxing authority, and this tax amount never shows up in the sellers account.
     *  </span>
     *
     * @return bool
     */
    public function getTotalIncludeseBayCollectedTax()
    {
        return $this->totalIncludeseBayCollectedTax;
    }

    /**
     * Sets a new totalIncludeseBayCollectedTax
     *
     * This boolean field is returned as <code>true</code> if the <b>TotalCost</b> value (for the line item) includes eBay 'Collect and Remit' taxes. eBay 'Collect and Remit' taxes include US state-mandated sales tax and 'Goods and Services' taxes that are applicable to orders from Australian and New Zealand sellers.
     *  <br><br>
     *  More and more US states are mandating the collection of sales tax for Internet sales. For a full list of affected states and effective dates, see the <a href="https://www.ebay.com/help/selling/fees-credits-invoices/taxes-import-charges?id=4121" target="_blank">eBay sales tax collection</a> help page.
     *  <br><br>
     *  For eBay managed payment orders, this field should always be returned as <code>false</code>, since eBay will always strip out any applicable sales tax (and remit to taxing authority) before the seller payout for the order line item is distributed to the seller's account.
     *  <br><br>
     *  <span class="tablenote"><b>Note: </b> As of November 2019, for orders subject to eBay 'Collect and Remit' taxes, PayPal has begun distributing order funds to the seller's account with the sales tax included. However, shortly after the order funds clear in the seller's account, the 'Collect and Remit' tax amount will be pulled by PayPal from the seller's account and then disributed to the appropriate taxing authority. Previously, PayPal was stripping this 'Collect and Remit' tax from the buyer's payment and directly submitting this amount to the appropriate taxing authority, and this tax amount never shows up in the sellers account.
     *  </span>
     *
     * @param bool $totalIncludeseBayCollectedTax
     * @return self
     */
    public function setTotalIncludeseBayCollectedTax($totalIncludeseBayCollectedTax)
    {
        $this->totalIncludeseBayCollectedTax = $totalIncludeseBayCollectedTax;
        return $this;
    }

    /**
     * Gets as paymentClearedTime
     *
     * The date and time that the payment was acknowledged.
     *
     * @return \DateTime
     */
    public function getPaymentClearedTime()
    {
        return $this->paymentClearedTime;
    }

    /**
     * Sets a new paymentClearedTime
     *
     * The date and time that the payment was acknowledged.
     *
     * @param \DateTime $paymentClearedTime
     * @return self
     */
    public function setPaymentClearedTime(\DateTime $paymentClearedTime)
    {
        $this->paymentClearedTime = $paymentClearedTime;
        return $this;
    }

    /**
     * Gets as insuranceCost
     *
     * Cost of insuring the delivery of this order with the courier.
     *
     * @return \Nogrod\eBaySDK\MerchantData\AmountType
     */
    public function getInsuranceCost()
    {
        return $this->insuranceCost;
    }

    /**
     * Sets a new insuranceCost
     *
     * Cost of insuring the delivery of this order with the courier.
     *
     * @param \Nogrod\eBaySDK\MerchantData\AmountType $insuranceCost
     * @return self
     */
    public function setInsuranceCost(\Nogrod\eBaySDK\MerchantData\AmountType $insuranceCost)
    {
        $this->insuranceCost = $insuranceCost;
        return $this;
    }

    /**
     * Gets as listingSiteID
     *
     * eBay site where the seller is registered.
     *
     * @return int
     */
    public function getListingSiteID()
    {
        return $this->listingSiteID;
    }

    /**
     * Sets a new listingSiteID
     *
     * eBay site where the seller is registered.
     *
     * @param int $listingSiteID
     * @return self
     */
    public function setListingSiteID($listingSiteID)
    {
        $this->listingSiteID = $listingSiteID;
        return $this;
    }

    /**
     * Gets as saleTime
     *
     * The date and time that the item was sold.
     *
     * @return \DateTime
     */
    public function getSaleTime()
    {
        return $this->saleTime;
    }

    /**
     * Sets a new saleTime
     *
     * The date and time that the item was sold.
     *
     * @param \DateTime $saleTime
     * @return self
     */
    public function setSaleTime(\DateTime $saleTime)
    {
        $this->saleTime = $saleTime;
        return $this;
    }

    /**
     * Gets as memo
     *
     * Notes for this transaction.
     *
     * @return string
     */
    public function getMemo()
    {
        return $this->memo;
    }

    /**
     * Sets a new memo
     *
     * Notes for this transaction.
     *
     * @param string $memo
     * @return self
     */
    public function setMemo($memo)
    {
        $this->memo = $memo;
        return $this;
    }

    /**
     * Gets as secondDescription
     *
     * Second description of the item sold.
     *
     * @return string
     */
    public function getSecondDescription()
    {
        return $this->secondDescription;
    }

    /**
     * Sets a new secondDescription
     *
     * Second description of the item sold.
     *
     * @param string $secondDescription
     * @return self
     */
    public function setSecondDescription($secondDescription)
    {
        $this->secondDescription = $secondDescription;
        return $this;
    }

    /**
     * Gets as feeDescription
     *
     * Description of the fee type.
     *
     * @return string
     */
    public function getFeeDescription()
    {
        return $this->feeDescription;
    }

    /**
     * Sets a new feeDescription
     *
     * Description of the fee type.
     *
     * @param string $feeDescription
     * @return self
     */
    public function setFeeDescription($feeDescription)
    {
        $this->feeDescription = $feeDescription;
        return $this;
    }

    /**
     * Gets as feeAmount
     *
     * Fee Amount for a certain Fee type.
     *
     * @return \Nogrod\eBaySDK\MerchantData\AmountType
     */
    public function getFeeAmount()
    {
        return $this->feeAmount;
    }

    /**
     * Sets a new feeAmount
     *
     * Fee Amount for a certain Fee type.
     *
     * @param \Nogrod\eBaySDK\MerchantData\AmountType $feeAmount
     * @return self
     */
    public function setFeeAmount(\Nogrod\eBaySDK\MerchantData\AmountType $feeAmount)
    {
        $this->feeAmount = $feeAmount;
        return $this;
    }

    public function xmlSerialize(\Sabre\Xml\Writer $writer)
    {
        $writer->writeAttribute("xmlns", "urn:ebay:apis:eBLBaseComponents");
        $value = $this->getOrderLineItemID();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}OrderLineItemID", $value);
        }
        $value = $this->getTransactionTime();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}TransactionTime", $value);
        }
        $value = $this->getOriginalChargeTime();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}OriginalChargeTime", $value);
        }
        $value = $this->getItemID();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}ItemID", $value);
        }
        $value = $this->getItemTitle();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}ItemTitle", $value);
        }
        $value = $this->getSerialNumber();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}SerialNumber", $value);
        }
        $value = $this->getSKU();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}SKU", $value);
        }
        $value = $this->getGlobalCategoryDescription();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}GlobalCategoryDescription", $value);
        }
        $value = $this->getSiteDescription();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}SiteDescription", $value);
        }
        $value = $this->getQuantitySold();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}QuantitySold", $value);
        }
        $value = $this->getSalePrice();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}SalePrice", $value);
        }
        $value = $this->getTaxAmount();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}TaxAmount", $value);
        }
        $value = $this->getShippingCost();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}ShippingCost", $value);
        }
        $value = $this->getTotalCost();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}TotalCost", $value);
        }
        $value = $this->getTotalIncludeseBayCollectedTax();
        $value = null !== $value ? ($value ? 'true' : 'false') : null;
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}TotalIncludeseBayCollectedTax", $value);
        }
        $value = $this->getPaymentClearedTime();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}PaymentClearedTime", $value);
        }
        $value = $this->getInsuranceCost();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}InsuranceCost", $value);
        }
        $value = $this->getListingSiteID();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}ListingSiteID", $value);
        }
        $value = $this->getSaleTime();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}SaleTime", $value);
        }
        $value = $this->getMemo();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}Memo", $value);
        }
        $value = $this->getSecondDescription();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}SecondDescription", $value);
        }
        $value = $this->getFeeDescription();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}FeeDescription", $value);
        }
        $value = $this->getFeeAmount();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}FeeAmount", $value);
        }
    }

    public static function xmlDeserialize(\Sabre\Xml\Reader $reader)
    {
        return self::fromKeyValue($reader->parseInnerTree([]));
    }

    public static function fromKeyValue($keyValue)
    {
        $self = new self();
        $self->setKeyValue($keyValue);
        return $self;
    }

    public function setKeyValue($keyValue)
    {
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}OrderLineItemID');
        if (null !== $value) {
            $this->setOrderLineItemID($value);
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}TransactionTime');
        if (null !== $value) {
            $this->setTransactionTime(new \DateTime($value));
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}OriginalChargeTime');
        if (null !== $value) {
            $this->setOriginalChargeTime(new \DateTime($value));
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}ItemID');
        if (null !== $value) {
            $this->setItemID($value);
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}ItemTitle');
        if (null !== $value) {
            $this->setItemTitle($value);
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}SerialNumber');
        if (null !== $value) {
            $this->setSerialNumber($value);
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}SKU');
        if (null !== $value) {
            $this->setSKU($value);
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}GlobalCategoryDescription');
        if (null !== $value) {
            $this->setGlobalCategoryDescription($value);
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}SiteDescription');
        if (null !== $value) {
            $this->setSiteDescription($value);
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}QuantitySold');
        if (null !== $value) {
            $this->setQuantitySold($value);
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}SalePrice');
        if (null !== $value) {
            $this->setSalePrice(\Nogrod\eBaySDK\MerchantData\AmountType::fromKeyValue($value));
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}TaxAmount');
        if (null !== $value) {
            $this->setTaxAmount(\Nogrod\eBaySDK\MerchantData\AmountType::fromKeyValue($value));
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}ShippingCost');
        if (null !== $value) {
            $this->setShippingCost(\Nogrod\eBaySDK\MerchantData\AmountType::fromKeyValue($value));
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}TotalCost');
        if (null !== $value) {
            $this->setTotalCost(\Nogrod\eBaySDK\MerchantData\AmountType::fromKeyValue($value));
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}TotalIncludeseBayCollectedTax');
        if (null !== $value) {
            $this->setTotalIncludeseBayCollectedTax($value);
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}PaymentClearedTime');
        if (null !== $value) {
            $this->setPaymentClearedTime(new \DateTime($value));
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}InsuranceCost');
        if (null !== $value) {
            $this->setInsuranceCost(\Nogrod\eBaySDK\MerchantData\AmountType::fromKeyValue($value));
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}ListingSiteID');
        if (null !== $value) {
            $this->setListingSiteID($value);
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}SaleTime');
        if (null !== $value) {
            $this->setSaleTime(new \DateTime($value));
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}Memo');
        if (null !== $value) {
            $this->setMemo($value);
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}SecondDescription');
        if (null !== $value) {
            $this->setSecondDescription($value);
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}FeeDescription');
        if (null !== $value) {
            $this->setFeeDescription($value);
        }
        $value = Func::mapArray($keyValue, '{urn:ebay:apis:eBLBaseComponents}FeeAmount');
        if (null !== $value) {
            $this->setFeeAmount(\Nogrod\eBaySDK\MerchantData\AmountType::fromKeyValue($value));
        }
    }
}
