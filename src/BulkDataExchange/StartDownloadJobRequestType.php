<?php

namespace Nogrod\eBaySDK\BulkDataExchange;

use Nogrod\XMLClientRuntime\Func;

/**
 * Class representing StartDownloadJobRequestType
 *
 * Begins processing the data for a report file to download. You must use the <b>getJobStatus</b> or <b>getRecurringJobExecutionStatus</b> calls to determine when the report data is available for download.
 * XSD Type: StartDownloadJobRequest
 */
class StartDownloadJobRequestType extends BaseServiceRequestType
{
    /**
     * This field is used to specify the Merchant Data report type to download when File Transfer API's <b>downloadFile</b> call is invoked.
     *  Each Bulk Data Exchange job can only have one job type per job.
     *  <br><br>
     *  <dl>
     *  <dt><strong>Applicable values:</strong></dt>
     *  <dt><b>ActiveInventoryReport</b></dt>
     *  <dd>A report that contains all of the active listings for a specific
     *  seller ID. The eBay servers read the credential information passed in by
     *  the seller's application to determine which seller's data to retrieve. For more information on <b>ActiveInventoryReport</b>, see the <a href="../../merchant-data/CallRef/ActiveInventoryReport.html" target="_blank">ActiveInventoryReport</a> call reference.
     *  <br><br>
     *  If this job type is specified, the user can customize the output of the <b>ActiveInventoryReport</b> by including and setting values for the <b>activeInventoryReportFilter</b> container.
     *  </dd>
     *  <dt><b>FeeSettlementReport</b></dt>
     *  <dd>A report that contains all of the fees that a seller has incurred
     *  as invoices are generated by the eBay servers. This report gives large
     *  merchants the ability to look at their fees for many listings in one file. For more information on <b>FeeSettlementReport</b>, see the <a href="../../merchant-data/CallRef/FeeSettlementReport.html" target="_blank">FeeSettlementReport</a> call reference.
     *  <br><br>
     *  If this job type is specified, the user must include the <b>feeSettlementReportFilter</b> container and set the <b>startTime</b> value for the <b>FeeSettlementReport</b>.
     *  </dd>
     *  <dt><b>SoldReport</b></dt>
     *  <dd>A report that contains all items that have been sold by the seller (sold items that were submitted to the Large Merchant Service by the seller's application). For more information on <b>SoldReport</b>, see the <a href="../../merchant-data/CallRef/SoldReport.html" target="_blank">SoldReport</a> call reference.
     *  <br><br>
     *  When an item is sold, the eBay application creates an 'order' for the
     *  seller. If only one item is sold, there is one order ID and one line item
     *  ID associated with the sale. However, if multiple items are sold as part
     *  of the same transaction, there is one order ID for the sale, and multiple
     *  line item IDs - one line item ID for each item sold.
     *  <br><br>
     *  Therefore, <b>SoldReport</b> returns the order IDs and line item IDs for
     *  every order associated with the seller who is making the request. Sellers
     *  use this information to make inventory updates and start order fulfillment.
     *  <br><br>
     *  To remove fulfilled orders from the <b>SoldReport</b> response, the seller can acknowledge these orders by uploading a list of <b>OrderID</b> and/or <b>OrderLineItemID</b> values in an <b>OrderAck</b> request.
     *  <br><br>
     *  After you upload a data file with an <b>OrderAck</b> request, the orders (or line
     *  items within an order) will no longer appear in <b>SoldReport</b>. After you
     *  send the first <b>OrderAck</b> call, future <b>SoldReport</b> responses will only
     *  contain unacknowledged orders and line items.
     *  <br><br>
     *  If this job type is specified, the user can control if/when shipping address fields are returned in the <b>SoldReport</b> by including and setting a value for the <b>soldReportFilter.includeShippingAddress</b> field.
     *  <dt><b>OrderReport</b></dt>
     *  <dd>If this report is specified, the response of the <b>downloadFile</b> call will be very similar to the data returned under the <b>OrderArray</b> container in the Trading API's <b>GetOrders</b> call. Other fields in the <b>GetOrders</b> response, including pagination results, <b>HasMoreOrders</b>, <b>OrdersPerPage</b>, <b>ReturnedOrderCountActual</b>, <b>ack</b>, <b>Build</b>, <b>CorrelationID</b>, and <b>Timestamp</b>, will not be returned in the <b>OrderReport</b>.
     *  <br><br>
     *  To remove fulfilled orders from the <b>OrderReport</b> response, the seller can acknowledge these orders by uploading a list of <b>OrderID</b> and/or <b>OrderLineItemID</b> values in an <b>OrderAck</b> request.
     *  <br><br>
     *  For more information on the <b>GetOrders</b> response, see the <a href="../../XML/docs/Reference/eBay/GetOrders.html#Response" target="_blank">GetOrders</a> call reference.
     *  <br><br>
     *  If this job type is specified, the user must include the <b>orderReportFilter</b> container and set its values. The values set in this container will control what appears in the <b>OrderReport</b> response.
     *  </dd>
     *  </dl>
     *
     * @var string $downloadJobType
     */
    private $downloadJobType = null;

    /**
     * A Universally Unique Identifier (UUID) provided by the seller's
     *  application.
     *
     * @var string $uUID
     */
    private $uUID = null;

    /**
     * This is parent container of any and all filters used in the request. The filters used within the <b>downloadRequestFilter</b> container will partially be dependent on the <b>downloadJobType</b> that is being performed.
     *
     * @var \Nogrod\eBaySDK\BulkDataExchange\DownloadRequestFilterType $downloadRequestFilter
     */
    private $downloadRequestFilter = null;

    /**
     * Global Uniquie Identifer in the Application recurring job properties
     *  table for example dbx_recurring_info_id in BDX_RECURRING_INFO_XX table.
     *
     * @var int $sgfAppRecurringGUID
     */
    private $sgfAppRecurringGUID = null;

    /**
     * It is an internal tag used to specify whether the download job
     *  is started as part of the recurring job request or not.
     *
     * @var bool $recurringJob
     */
    private $recurringJob = null;

    /**
     * Gets as downloadJobType
     *
     * This field is used to specify the Merchant Data report type to download when File Transfer API's <b>downloadFile</b> call is invoked.
     *  Each Bulk Data Exchange job can only have one job type per job.
     *  <br><br>
     *  <dl>
     *  <dt><strong>Applicable values:</strong></dt>
     *  <dt><b>ActiveInventoryReport</b></dt>
     *  <dd>A report that contains all of the active listings for a specific
     *  seller ID. The eBay servers read the credential information passed in by
     *  the seller's application to determine which seller's data to retrieve. For more information on <b>ActiveInventoryReport</b>, see the <a href="../../merchant-data/CallRef/ActiveInventoryReport.html" target="_blank">ActiveInventoryReport</a> call reference.
     *  <br><br>
     *  If this job type is specified, the user can customize the output of the <b>ActiveInventoryReport</b> by including and setting values for the <b>activeInventoryReportFilter</b> container.
     *  </dd>
     *  <dt><b>FeeSettlementReport</b></dt>
     *  <dd>A report that contains all of the fees that a seller has incurred
     *  as invoices are generated by the eBay servers. This report gives large
     *  merchants the ability to look at their fees for many listings in one file. For more information on <b>FeeSettlementReport</b>, see the <a href="../../merchant-data/CallRef/FeeSettlementReport.html" target="_blank">FeeSettlementReport</a> call reference.
     *  <br><br>
     *  If this job type is specified, the user must include the <b>feeSettlementReportFilter</b> container and set the <b>startTime</b> value for the <b>FeeSettlementReport</b>.
     *  </dd>
     *  <dt><b>SoldReport</b></dt>
     *  <dd>A report that contains all items that have been sold by the seller (sold items that were submitted to the Large Merchant Service by the seller's application). For more information on <b>SoldReport</b>, see the <a href="../../merchant-data/CallRef/SoldReport.html" target="_blank">SoldReport</a> call reference.
     *  <br><br>
     *  When an item is sold, the eBay application creates an 'order' for the
     *  seller. If only one item is sold, there is one order ID and one line item
     *  ID associated with the sale. However, if multiple items are sold as part
     *  of the same transaction, there is one order ID for the sale, and multiple
     *  line item IDs - one line item ID for each item sold.
     *  <br><br>
     *  Therefore, <b>SoldReport</b> returns the order IDs and line item IDs for
     *  every order associated with the seller who is making the request. Sellers
     *  use this information to make inventory updates and start order fulfillment.
     *  <br><br>
     *  To remove fulfilled orders from the <b>SoldReport</b> response, the seller can acknowledge these orders by uploading a list of <b>OrderID</b> and/or <b>OrderLineItemID</b> values in an <b>OrderAck</b> request.
     *  <br><br>
     *  After you upload a data file with an <b>OrderAck</b> request, the orders (or line
     *  items within an order) will no longer appear in <b>SoldReport</b>. After you
     *  send the first <b>OrderAck</b> call, future <b>SoldReport</b> responses will only
     *  contain unacknowledged orders and line items.
     *  <br><br>
     *  If this job type is specified, the user can control if/when shipping address fields are returned in the <b>SoldReport</b> by including and setting a value for the <b>soldReportFilter.includeShippingAddress</b> field.
     *  <dt><b>OrderReport</b></dt>
     *  <dd>If this report is specified, the response of the <b>downloadFile</b> call will be very similar to the data returned under the <b>OrderArray</b> container in the Trading API's <b>GetOrders</b> call. Other fields in the <b>GetOrders</b> response, including pagination results, <b>HasMoreOrders</b>, <b>OrdersPerPage</b>, <b>ReturnedOrderCountActual</b>, <b>ack</b>, <b>Build</b>, <b>CorrelationID</b>, and <b>Timestamp</b>, will not be returned in the <b>OrderReport</b>.
     *  <br><br>
     *  To remove fulfilled orders from the <b>OrderReport</b> response, the seller can acknowledge these orders by uploading a list of <b>OrderID</b> and/or <b>OrderLineItemID</b> values in an <b>OrderAck</b> request.
     *  <br><br>
     *  For more information on the <b>GetOrders</b> response, see the <a href="../../XML/docs/Reference/eBay/GetOrders.html#Response" target="_blank">GetOrders</a> call reference.
     *  <br><br>
     *  If this job type is specified, the user must include the <b>orderReportFilter</b> container and set its values. The values set in this container will control what appears in the <b>OrderReport</b> response.
     *  </dd>
     *  </dl>
     *
     * @return string
     */
    public function getDownloadJobType()
    {
        return $this->downloadJobType;
    }

    /**
     * Sets a new downloadJobType
     *
     * This field is used to specify the Merchant Data report type to download when File Transfer API's <b>downloadFile</b> call is invoked.
     *  Each Bulk Data Exchange job can only have one job type per job.
     *  <br><br>
     *  <dl>
     *  <dt><strong>Applicable values:</strong></dt>
     *  <dt><b>ActiveInventoryReport</b></dt>
     *  <dd>A report that contains all of the active listings for a specific
     *  seller ID. The eBay servers read the credential information passed in by
     *  the seller's application to determine which seller's data to retrieve. For more information on <b>ActiveInventoryReport</b>, see the <a href="../../merchant-data/CallRef/ActiveInventoryReport.html" target="_blank">ActiveInventoryReport</a> call reference.
     *  <br><br>
     *  If this job type is specified, the user can customize the output of the <b>ActiveInventoryReport</b> by including and setting values for the <b>activeInventoryReportFilter</b> container.
     *  </dd>
     *  <dt><b>FeeSettlementReport</b></dt>
     *  <dd>A report that contains all of the fees that a seller has incurred
     *  as invoices are generated by the eBay servers. This report gives large
     *  merchants the ability to look at their fees for many listings in one file. For more information on <b>FeeSettlementReport</b>, see the <a href="../../merchant-data/CallRef/FeeSettlementReport.html" target="_blank">FeeSettlementReport</a> call reference.
     *  <br><br>
     *  If this job type is specified, the user must include the <b>feeSettlementReportFilter</b> container and set the <b>startTime</b> value for the <b>FeeSettlementReport</b>.
     *  </dd>
     *  <dt><b>SoldReport</b></dt>
     *  <dd>A report that contains all items that have been sold by the seller (sold items that were submitted to the Large Merchant Service by the seller's application). For more information on <b>SoldReport</b>, see the <a href="../../merchant-data/CallRef/SoldReport.html" target="_blank">SoldReport</a> call reference.
     *  <br><br>
     *  When an item is sold, the eBay application creates an 'order' for the
     *  seller. If only one item is sold, there is one order ID and one line item
     *  ID associated with the sale. However, if multiple items are sold as part
     *  of the same transaction, there is one order ID for the sale, and multiple
     *  line item IDs - one line item ID for each item sold.
     *  <br><br>
     *  Therefore, <b>SoldReport</b> returns the order IDs and line item IDs for
     *  every order associated with the seller who is making the request. Sellers
     *  use this information to make inventory updates and start order fulfillment.
     *  <br><br>
     *  To remove fulfilled orders from the <b>SoldReport</b> response, the seller can acknowledge these orders by uploading a list of <b>OrderID</b> and/or <b>OrderLineItemID</b> values in an <b>OrderAck</b> request.
     *  <br><br>
     *  After you upload a data file with an <b>OrderAck</b> request, the orders (or line
     *  items within an order) will no longer appear in <b>SoldReport</b>. After you
     *  send the first <b>OrderAck</b> call, future <b>SoldReport</b> responses will only
     *  contain unacknowledged orders and line items.
     *  <br><br>
     *  If this job type is specified, the user can control if/when shipping address fields are returned in the <b>SoldReport</b> by including and setting a value for the <b>soldReportFilter.includeShippingAddress</b> field.
     *  <dt><b>OrderReport</b></dt>
     *  <dd>If this report is specified, the response of the <b>downloadFile</b> call will be very similar to the data returned under the <b>OrderArray</b> container in the Trading API's <b>GetOrders</b> call. Other fields in the <b>GetOrders</b> response, including pagination results, <b>HasMoreOrders</b>, <b>OrdersPerPage</b>, <b>ReturnedOrderCountActual</b>, <b>ack</b>, <b>Build</b>, <b>CorrelationID</b>, and <b>Timestamp</b>, will not be returned in the <b>OrderReport</b>.
     *  <br><br>
     *  To remove fulfilled orders from the <b>OrderReport</b> response, the seller can acknowledge these orders by uploading a list of <b>OrderID</b> and/or <b>OrderLineItemID</b> values in an <b>OrderAck</b> request.
     *  <br><br>
     *  For more information on the <b>GetOrders</b> response, see the <a href="../../XML/docs/Reference/eBay/GetOrders.html#Response" target="_blank">GetOrders</a> call reference.
     *  <br><br>
     *  If this job type is specified, the user must include the <b>orderReportFilter</b> container and set its values. The values set in this container will control what appears in the <b>OrderReport</b> response.
     *  </dd>
     *  </dl>
     *
     * @param string $downloadJobType
     * @return self
     */
    public function setDownloadJobType($downloadJobType)
    {
        $this->downloadJobType = $downloadJobType;
        return $this;
    }

    /**
     * Gets as uUID
     *
     * A Universally Unique Identifier (UUID) provided by the seller's
     *  application.
     *
     * @return string
     */
    public function getUUID()
    {
        return $this->uUID;
    }

    /**
     * Sets a new uUID
     *
     * A Universally Unique Identifier (UUID) provided by the seller's
     *  application.
     *
     * @param string $uUID
     * @return self
     */
    public function setUUID($uUID)
    {
        $this->uUID = $uUID;
        return $this;
    }

    /**
     * Gets as downloadRequestFilter
     *
     * This is parent container of any and all filters used in the request. The filters used within the <b>downloadRequestFilter</b> container will partially be dependent on the <b>downloadJobType</b> that is being performed.
     *
     * @return \Nogrod\eBaySDK\BulkDataExchange\DownloadRequestFilterType
     */
    public function getDownloadRequestFilter()
    {
        return $this->downloadRequestFilter;
    }

    /**
     * Sets a new downloadRequestFilter
     *
     * This is parent container of any and all filters used in the request. The filters used within the <b>downloadRequestFilter</b> container will partially be dependent on the <b>downloadJobType</b> that is being performed.
     *
     * @param \Nogrod\eBaySDK\BulkDataExchange\DownloadRequestFilterType $downloadRequestFilter
     * @return self
     */
    public function setDownloadRequestFilter(\Nogrod\eBaySDK\BulkDataExchange\DownloadRequestFilterType $downloadRequestFilter)
    {
        $this->downloadRequestFilter = $downloadRequestFilter;
        return $this;
    }

    /**
     * Gets as sgfAppRecurringGUID
     *
     * Global Uniquie Identifer in the Application recurring job properties
     *  table for example dbx_recurring_info_id in BDX_RECURRING_INFO_XX table.
     *
     * @return int
     */
    public function getSgfAppRecurringGUID()
    {
        return $this->sgfAppRecurringGUID;
    }

    /**
     * Sets a new sgfAppRecurringGUID
     *
     * Global Uniquie Identifer in the Application recurring job properties
     *  table for example dbx_recurring_info_id in BDX_RECURRING_INFO_XX table.
     *
     * @param int $sgfAppRecurringGUID
     * @return self
     */
    public function setSgfAppRecurringGUID($sgfAppRecurringGUID)
    {
        $this->sgfAppRecurringGUID = $sgfAppRecurringGUID;
        return $this;
    }

    /**
     * Gets as recurringJob
     *
     * It is an internal tag used to specify whether the download job
     *  is started as part of the recurring job request or not.
     *
     * @return bool
     */
    public function getRecurringJob()
    {
        return $this->recurringJob;
    }

    /**
     * Sets a new recurringJob
     *
     * It is an internal tag used to specify whether the download job
     *  is started as part of the recurring job request or not.
     *
     * @param bool $recurringJob
     * @return self
     */
    public function setRecurringJob($recurringJob)
    {
        $this->recurringJob = $recurringJob;
        return $this;
    }

    public function xmlSerialize(\Sabre\Xml\Writer $writer): void
    {
        parent::xmlSerialize($writer);
        $value = $this->getDownloadJobType();
        if (null !== $value) {
            $writer->writeElement("{http://www.ebay.com/marketplace/services}downloadJobType", $value);
        }
        $value = $this->getUUID();
        if (null !== $value) {
            $writer->writeElement("{http://www.ebay.com/marketplace/services}UUID", $value);
        }
        $value = $this->getDownloadRequestFilter();
        if (null !== $value) {
            $writer->writeElement("{http://www.ebay.com/marketplace/services}downloadRequestFilter", $value);
        }
        $value = $this->getSgfAppRecurringGUID();
        if (null !== $value) {
            $writer->writeElement("{http://www.ebay.com/marketplace/services}sgfAppRecurringGUID", $value);
        }
        $value = $this->getRecurringJob();
        $value = null !== $value ? ($value ? 'true' : 'false') : null;
        if (null !== $value) {
            $writer->writeElement("{http://www.ebay.com/marketplace/services}recurringJob", $value);
        }
    }

    public static function xmlDeserialize(\Sabre\Xml\Reader $reader)
    {
        return self::fromKeyValue($reader->parseInnerTree([]));
    }

    public static function fromKeyValue($keyValue)
    {
        $self = new self();
        $self->setKeyValue($keyValue);
        return $self;
    }

    public function setKeyValue($keyValue)
    {
        parent::setKeyValue($keyValue);
        $value = Func::mapArray($keyValue, '{http://www.ebay.com/marketplace/services}downloadJobType');
        if (null !== $value) {
            $this->setDownloadJobType($value);
        }
        $value = Func::mapArray($keyValue, '{http://www.ebay.com/marketplace/services}UUID');
        if (null !== $value) {
            $this->setUUID($value);
        }
        $value = Func::mapArray($keyValue, '{http://www.ebay.com/marketplace/services}downloadRequestFilter');
        if (null !== $value) {
            $this->setDownloadRequestFilter(\Nogrod\eBaySDK\BulkDataExchange\DownloadRequestFilterType::fromKeyValue($value));
        }
        $value = Func::mapArray($keyValue, '{http://www.ebay.com/marketplace/services}sgfAppRecurringGUID');
        if (null !== $value) {
            $this->setSgfAppRecurringGUID($value);
        }
        $value = Func::mapArray($keyValue, '{http://www.ebay.com/marketplace/services}recurringJob');
        if (null !== $value) {
            $this->setRecurringJob($value);
        }
    }
}
