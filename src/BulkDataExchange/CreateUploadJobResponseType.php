<?php

namespace Nogrod\eBaySDK\BulkDataExchange;

use Nogrod\XMLClientRuntime\Func;

/**
 * Class representing CreateUploadJobResponseType
 *
 * Type defining the root container of the <b>createUploadJob</b> response. The response includes the job ID, a file reference ID, the maximum upload file size for
 *  the data file, and the standard output fields like <b>ack</b>, <b>timestamp</b>, <b>version</b>, and any errors/warnings that are generated by the request to create an upload job.
 *  <br>
 *  <br>
 *  The call-specific data will be needed when using the <b>uploadFile</b> call of the File Transfer API.
 * XSD Type: CreateUploadJobResponse
 */
class CreateUploadJobResponseType extends BaseServiceResponseType
{

    /**
     * Unique ID assigned by the Bulk Data Exchange API for managing your
     *  upload job. Use this <b>jobId</b> to activate
     *  (<b>startUploadJob</b>b) or abort (<b>abortJob</b>) processing of an uploaded file. You can
     *  also use <b>jobId</b> in <b>getJobStatus</b> to check on processing progress for a job.
     *  <br><br>
     *  Before you can start an upload job, you must upload the corresponding data
     *  file, using the File Transfer API. In the File Transfer API, <b>jobId</b> maps to <b>taskReferenceId</b> in the <b>uploadFile</b> call.
     *
     * @var string $jobId
     */
    private $jobId = null;

    /**
     * A unique ID assigned to a file by the Bulk Data Exchange API. This value will be passed into the <b>fileReferenceId</b> field in the File Transfer API's <b>uploadFile</b> call.
     *
     * @var string $fileReferenceId
     */
    private $fileReferenceId = null;

    /**
     * This value indicates the maximum size of a file that may be uploaded or downloaded. Currently, the
     *  default maximum size is 15MB. The number of calls allowed in a data file
     *  that you want to upload varies with the size of the Item description, the
     *  type of data in the description, and the complexity of each call in your
     *  file.
     *
     * @var string $maxFileSize
     */
    private $maxFileSize = null;

    /**
     * Gets as jobId
     *
     * Unique ID assigned by the Bulk Data Exchange API for managing your
     *  upload job. Use this <b>jobId</b> to activate
     *  (<b>startUploadJob</b>b) or abort (<b>abortJob</b>) processing of an uploaded file. You can
     *  also use <b>jobId</b> in <b>getJobStatus</b> to check on processing progress for a job.
     *  <br><br>
     *  Before you can start an upload job, you must upload the corresponding data
     *  file, using the File Transfer API. In the File Transfer API, <b>jobId</b> maps to <b>taskReferenceId</b> in the <b>uploadFile</b> call.
     *
     * @return string
     */
    public function getJobId()
    {
        return $this->jobId;
    }

    /**
     * Sets a new jobId
     *
     * Unique ID assigned by the Bulk Data Exchange API for managing your
     *  upload job. Use this <b>jobId</b> to activate
     *  (<b>startUploadJob</b>b) or abort (<b>abortJob</b>) processing of an uploaded file. You can
     *  also use <b>jobId</b> in <b>getJobStatus</b> to check on processing progress for a job.
     *  <br><br>
     *  Before you can start an upload job, you must upload the corresponding data
     *  file, using the File Transfer API. In the File Transfer API, <b>jobId</b> maps to <b>taskReferenceId</b> in the <b>uploadFile</b> call.
     *
     * @param string $jobId
     * @return self
     */
    public function setJobId($jobId)
    {
        $this->jobId = $jobId;
        return $this;
    }

    /**
     * Gets as fileReferenceId
     *
     * A unique ID assigned to a file by the Bulk Data Exchange API. This value will be passed into the <b>fileReferenceId</b> field in the File Transfer API's <b>uploadFile</b> call.
     *
     * @return string
     */
    public function getFileReferenceId()
    {
        return $this->fileReferenceId;
    }

    /**
     * Sets a new fileReferenceId
     *
     * A unique ID assigned to a file by the Bulk Data Exchange API. This value will be passed into the <b>fileReferenceId</b> field in the File Transfer API's <b>uploadFile</b> call.
     *
     * @param string $fileReferenceId
     * @return self
     */
    public function setFileReferenceId($fileReferenceId)
    {
        $this->fileReferenceId = $fileReferenceId;
        return $this;
    }

    /**
     * Gets as maxFileSize
     *
     * This value indicates the maximum size of a file that may be uploaded or downloaded. Currently, the
     *  default maximum size is 15MB. The number of calls allowed in a data file
     *  that you want to upload varies with the size of the Item description, the
     *  type of data in the description, and the complexity of each call in your
     *  file.
     *
     * @return string
     */
    public function getMaxFileSize()
    {
        return $this->maxFileSize;
    }

    /**
     * Sets a new maxFileSize
     *
     * This value indicates the maximum size of a file that may be uploaded or downloaded. Currently, the
     *  default maximum size is 15MB. The number of calls allowed in a data file
     *  that you want to upload varies with the size of the Item description, the
     *  type of data in the description, and the complexity of each call in your
     *  file.
     *
     * @param string $maxFileSize
     * @return self
     */
    public function setMaxFileSize($maxFileSize)
    {
        $this->maxFileSize = $maxFileSize;
        return $this;
    }

    public function xmlSerialize(\Sabre\Xml\Writer $writer)
    {
        parent::xmlSerialize($writer);
        $value = $this->getJobId();
        if (null !== $value) {
            $writer->writeElement("{http://www.ebay.com/marketplace/services}jobId", $value);
        }
        $value = $this->getFileReferenceId();
        if (null !== $value) {
            $writer->writeElement("{http://www.ebay.com/marketplace/services}fileReferenceId", $value);
        }
        $value = $this->getMaxFileSize();
        if (null !== $value) {
            $writer->writeElement("{http://www.ebay.com/marketplace/services}maxFileSize", $value);
        }
    }

    public static function xmlDeserialize(\Sabre\Xml\Reader $reader)
    {
        return self::fromKeyValue($reader->parseInnerTree([]));
    }

    public static function fromKeyValue($keyValue)
    {
        $self = new self();
        $self->setKeyValue($keyValue);
        return $self;
    }

    public function setKeyValue($keyValue)
    {
        parent::setKeyValue($keyValue);
        $value = Func::mapArray($keyValue, '{http://www.ebay.com/marketplace/services}jobId');
        if (null !== $value) {
            $this->setJobId($value);
        }
        $value = Func::mapArray($keyValue, '{http://www.ebay.com/marketplace/services}fileReferenceId');
        if (null !== $value) {
            $this->setFileReferenceId($value);
        }
        $value = Func::mapArray($keyValue, '{http://www.ebay.com/marketplace/services}maxFileSize');
        if (null !== $value) {
            $this->setMaxFileSize($value);
        }
    }
}
