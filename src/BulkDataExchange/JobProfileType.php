<?php

namespace Nogrod\eBaySDK\BulkDataExchange;

use Nogrod\XMLClientRuntime\Func;

/**
 * Class representing JobProfileType
 *
 * Type defining the <b>jobProfile</b> container that is returned in Bulk Data Exchange API's "get" calls. The <b>jobProfile</b> container consists of unique identifiers for a job, as well as data that indicates the current status of the job.
 *  <br><br>
 *  The job profile returns data about the state of the Bulk Data Exchange job, but does not return information about the status of the processing for any data file that is sent with the job request or returned with the job response.
 * XSD Type: JobProfile
 */
class JobProfileType implements \Sabre\Xml\XmlSerializable, \Sabre\Xml\XmlDeserializable
{
    /**
     * Unique ID that is assigned for a job by the Bulk Data Exchange API after a successful <b>startDownloadJob</ b> call. This value is always returned with the <b>jobProfile</b> container.
     *
     * @var string $jobId
     */
    private $jobId = null;

    /**
     * Each of the Bulk Data Exchange job types corresponds to a Merchant Data request
     *  or response with the same name. The requests or responses are included within a
     *  data file that will be uploaded or downloaded after the job is created. For
     *  instance, if you create an <b>AddFixedPriceItem</b> job, then the file you are going
     *  to upload must contain <b>AddFixedPriceItem</b> requests - one request for each item
     *  in your data file.
     *  <br><br>
     *  Each Bulk Data Exchange job can only have one job type per job. For example, if
     *  you are uploading a data file, it can not have both <b>AddFixedPriceItem</b> requests
     *  and <b>ReviseFixedPriceItem</b> requests within the same data file.
     *  <br><br>
     *  The following value definitions describe the request or response associated
     *  with each job type.
     *  <br><br>
     *  For more information about creating and uploading Merchant Data files, see the
     *  Large Merchant Services User Guide.
     *
     *  <br><br>
     *  <dl>
     *  <dt><strong>Applicable values:</strong></dt>
     *  <dt>ActiveInventoryReport</strong></dt>
     *  <dd>
     *  Download job for a report that contains all of the active listings for a
     *  specific seller ID. The eBay servers read the credential information
     *  passed in by the seller's application to determine which seller's data to
     *  retrieve.
     *  </dd>
     *  <dt><strong>AddFixedPriceItem</strong></dt>
     *  <dd>
     *  Upload job for requests to add fixed-price items and lists it on a
     *  specified eBay site.
     *  </dd>
     *  <dt><strong>AddItem</strong></dt>
     *  <dd>
     *  Upload job for requests to Defines a single new item and lists it on a
     *  specified eBay site.
     *  </dd>
     *  <dt><strong>EndFixedPriceItem</strong></dt>
     *  <dd>
     *  Upload job for requests to end specified fixed-price item listings before
     *  the date and time at which they would normally end (per the listing
     *  duration).
     *  </dd>
     *  <dt><strong>EndItem</strong></dt>
     *  <dd>
     *  Upload job for requests to end specified item listings before the date
     *  and time at which they would normally end (per the listing duration).
     *  </dd>
     *  <dt><strong>FeeSettlementReport</strong></dt>
     *  <dd>
     *  Download job for a report that contains all of the fees the seller has
     *  incurred as invoices are generated by the eBay servers. This report gives
     *  large merchants the ability to look at their fees for many listings in
     *  one file.
     *  </dd>
     *  <dt><strong>OrderAck</strong></dt>
     *  <dd>
     *  Upload job for requests that acknowledge orders have been received. Use
     *  the <b>OrderAck</b> request to acknowledge each
     *  line item in a <b>SoldReport</b> by order ID or
     *  line item ID.
     *  <br><br>
     *  After you send the first <b>OrderAck</b> call,
     *  future <b>SoldReports</b> will only contain
     *  unacknowledged orders or line items.
     *  </dd>
     *  <dt><strong>RelistFixedPriceItem</strong></dt>
     *  <dd>
     *  Upload job for requests to re-list fixed-price (single or multi-item)
     *  listings that ended without buyers. A listing may be re-listed with the
     *  same item properties as the original or the seller may change a number of
     *  the item's defining properties at re- listing time. The new listing will
     *  have a different item ID than the original one.
     *  </dd>
     *  <dt><strong>RelistItem</strong></dt>
     *  <dd>
     *  Upload job for requests to re-list listings that ended without winning
     *  bidders or buyers. Enables a seller to take a single item (or a single
     *  multi-item listing) and re-list it on a specified eBay site.
     *  </dd>
     *  <dt><strong>ReviseFixedPriceItem</strong></dt>
     *  <dd>
     *  Upload job for requests to change the properties of a currently active
     *  listing.
     *  <br><br>
     *  If the listing contains multiple items, you can revise most of the fields
     *  in the listing (except Title, currency, product ID, photo display type,
     *  variation details, duration, format, or eBay Giving Works charity), even
     *  after one of the items in the listing has been purchased. To revise
     *  multiple listings, include a ReviseFixedPriceItemRequest once for each
     *  item or listing in your data file, with new information for each item or
     *  listing.
     *  </dd>
     *  <dt><strong>ReviseInventoryStatus</strong></dt>
     *  <dd>
     *  Upload job for requests to change the price and quantity of a currently
     *  active fixed-price listing. Inputs are the item IDs or SKUs of the
     *  listings being revised, and price and quantity that are being changed for
     *  each revision.
     *  <br><br>
     *  You can use SKU as input only for fixed-price listings that are managed
     *  by SKU (i.e., <b>InventoryTrackingMethod</b> is
     *  set to SKU). <b>ItemID</b> can be used in either
     *  case.
     *  </dd>
     *  <dt><strong>ReviseItem</strong></dt>
     *  <dd>
     *  Upload job for requests to change the properties of active listings.
     *  </dd>
     *  <dt><strong>SetShipmentTrackingInfo</strong></dt>
     *  <dd>
     *  Upload job for requests to specify the shipment tracking information
     *  associated with one package of an order.
     *  </dd>
     *  <dt><strong>SoldReport</strong></dt>
     *  <dd>
     *  Download job for a report that lists all items that have been sold by
     *  this seller (sold items that were submitted to the Large Merchant Service
     *  by the seller's application).
     *  <br><br>
     *  When an item is sold, the eBay application creates an 'order' for the
     *  seller. If only one item is sold, there is one order ID and one line item
     *  ID associated with the sale. However, if multiple items are sold as part
     *  of the same transaction, there is one order ID for the sale, and multiple
     *  line item IDs - one line item ID for each item sold.
     *  <br><br>
     *  Therefore, the Sold Report returns the order IDs and line item IDs for
     *  every order associated with the seller who is making the request. Sellers
     *  use this information to make inventory updates and start order
     *  fulfillment.
     *  <br><br>
     *  When orders have been fulfilled, the seller will probably want to remove
     *  them from the list of all orders that comes back every time they receive
     *  a SoldReport. To do this, they can acknowledge each order that has been
     *  fulfulled (using order ID or line item ID) by uploading a list of the
     *  fulfulled order information using an <b
     *  class="con">OrderAck</b> request.
     *  <br><br>
     *  After you upload a data file with an <b
     *  class="con">OrderAck</b> request, the orders (or line items
     *  within an order) will no longer appear in the <b>
     *  SoldReport</b>. (After you send the first <b>
     *  OrderAck</b> call, future <b
     *  class="con">SoldReports</b> that you request will only contain
     *  unacknowledged orders and line items.)
     *  </dd>
     *  <dt><strong>UploadSiteHostedPictures</strong></dt>
     *  <dd>
     *  Upload job for requests to upload pictures to EPS (eBay Picture
     *  Services). Each request contains a URL in the <b>
     *  ExternalPictureURL</b> field (the location of the picture on an
     *  external web server). Unlike what the call name implies, you can only
     *  upload one picture per request.
     *  </dd>
     *  <dt><strong>VerifyAddFixedPriceItem</strong></dt>
     *  <dd>
     *  Upload job for requests to test the definition of new fixed-price items
     *  by submitting them to eBay without creating a listing.
     *  </dd>
     *  <dt><strong>VerifyAddItem</strong></dt>
     *  <dd>
     *  Upload job for requests to test the definition of new items and submit
     *  the definition to eBay without creating a listing.
     *  </dd>
     *  </dl>
     *  <br><br>
     *  Recurring jobs can be established for download job types only. For <strong>getRecurringJobExecutionHistory</strong> and <strong>getRecurringJobExecutionStatus</strong>, only the following values apply:
     *  <br><br>
     *  <ul>
     *  <li>ActiveInventoryReport</li>
     *  <li>FeeSettlementReport</li>
     *  <li>SoldReport</li>
     *  </ul>
     *
     * @var string $jobType
     */
    private $jobType = null;

    /**
     * The current state of a Bulk Data Exchange job. This value is always returned with the <b>jobProfile</b> container.
     *
     * @var string $jobStatus
     */
    private $jobStatus = null;

    /**
     * This timestamp indicates the date and time that the Bulk Data Exchange job was created. This value is always returned with the <b>jobProfile</b> container.
     *
     * @var \DateTime $creationTime
     */
    private $creationTime = null;

    /**
     * This timestamp indicates the date and time that the Bulk Data Exchange job was completed. Compare this timestamp against <strong>creationTime<strong>
     *  to determine the average processing time for your jobs. If processing of the job has not completed, this field will not be returned. The user will have to look at the <strong>percentComplete</strong> value to determine the current status of the running job.
     *
     * @var \DateTime $completionTime
     */
    private $completionTime = null;

    /**
     * The number of non-fatal (informational) errors that occurred during file
     *  processing (uploads or reports) after a
     *  <strong>startUploadJobRequest</strong> or <strong>startDownloadJobRequest</strong> call.
     *
     * @var int $errorCount
     */
    private $errorCount = null;

    /**
     * The percentage of your file that has been processed after <strong>startUploadJobRequest</strong> or <strong>startDownloadJobRequest</strong> call. This value is always returned with the <b>jobProfile</b> container whether the job is still in progress or complete. If the job is complete, the value of this field will be '100.0'.
     *
     * @var float $percentComplete
     */
    private $percentComplete = null;

    /**
     * A unique ID assigned to a file by the Bulk Data Exchange API. This value will be passed into the <b>fileReferenceId</b> field in the File Transfer API's <b>uploadFile</b> call.
     *  <br><br>
     *  If a job has not completed processing, only the <b>inputFileReferenceId</b> value (from the <b>createUploadJob</b> response) will be returned. Once the upload job has finished processing, a new <b>fileReferenceId</b> is assigned by the Bulk Data Exchange API and returned by the job status calls.
     *
     * @var string $fileReferenceId
     */
    private $fileReferenceId = null;

    /**
     * A unique ID that references the input data file for a job that is created via <b>createUploadJob</b>. This field preserves the original <b>fileReferenceId</b> value for an upload job. Once the data file has been uploaded and the upload job has finished processing, a new <b>fileReferenceId</b> value is assigned by the Bulk Data Exchange API for downloading the corresponding responses. This value is always returned with the <b>jobProfile</b> container.
     *
     * @var string $inputFileReferenceId
     */
    private $inputFileReferenceId = null;

    /**
     * The <b>startTime</b> and <b>endTime</b> date range filters are used to restrict jobs retrieved in the response to those executed within the specified date range.
     *
     * @var \DateTime $startTime
     */
    private $startTime = null;

    /**
     * Gets as jobId
     *
     * Unique ID that is assigned for a job by the Bulk Data Exchange API after a successful <b>startDownloadJob</ b> call. This value is always returned with the <b>jobProfile</b> container.
     *
     * @return string
     */
    public function getJobId()
    {
        return $this->jobId;
    }

    /**
     * Sets a new jobId
     *
     * Unique ID that is assigned for a job by the Bulk Data Exchange API after a successful <b>startDownloadJob</ b> call. This value is always returned with the <b>jobProfile</b> container.
     *
     * @param string $jobId
     * @return self
     */
    public function setJobId($jobId)
    {
        $this->jobId = $jobId;
        return $this;
    }

    /**
     * Gets as jobType
     *
     * Each of the Bulk Data Exchange job types corresponds to a Merchant Data request
     *  or response with the same name. The requests or responses are included within a
     *  data file that will be uploaded or downloaded after the job is created. For
     *  instance, if you create an <b>AddFixedPriceItem</b> job, then the file you are going
     *  to upload must contain <b>AddFixedPriceItem</b> requests - one request for each item
     *  in your data file.
     *  <br><br>
     *  Each Bulk Data Exchange job can only have one job type per job. For example, if
     *  you are uploading a data file, it can not have both <b>AddFixedPriceItem</b> requests
     *  and <b>ReviseFixedPriceItem</b> requests within the same data file.
     *  <br><br>
     *  The following value definitions describe the request or response associated
     *  with each job type.
     *  <br><br>
     *  For more information about creating and uploading Merchant Data files, see the
     *  Large Merchant Services User Guide.
     *
     *  <br><br>
     *  <dl>
     *  <dt><strong>Applicable values:</strong></dt>
     *  <dt>ActiveInventoryReport</strong></dt>
     *  <dd>
     *  Download job for a report that contains all of the active listings for a
     *  specific seller ID. The eBay servers read the credential information
     *  passed in by the seller's application to determine which seller's data to
     *  retrieve.
     *  </dd>
     *  <dt><strong>AddFixedPriceItem</strong></dt>
     *  <dd>
     *  Upload job for requests to add fixed-price items and lists it on a
     *  specified eBay site.
     *  </dd>
     *  <dt><strong>AddItem</strong></dt>
     *  <dd>
     *  Upload job for requests to Defines a single new item and lists it on a
     *  specified eBay site.
     *  </dd>
     *  <dt><strong>EndFixedPriceItem</strong></dt>
     *  <dd>
     *  Upload job for requests to end specified fixed-price item listings before
     *  the date and time at which they would normally end (per the listing
     *  duration).
     *  </dd>
     *  <dt><strong>EndItem</strong></dt>
     *  <dd>
     *  Upload job for requests to end specified item listings before the date
     *  and time at which they would normally end (per the listing duration).
     *  </dd>
     *  <dt><strong>FeeSettlementReport</strong></dt>
     *  <dd>
     *  Download job for a report that contains all of the fees the seller has
     *  incurred as invoices are generated by the eBay servers. This report gives
     *  large merchants the ability to look at their fees for many listings in
     *  one file.
     *  </dd>
     *  <dt><strong>OrderAck</strong></dt>
     *  <dd>
     *  Upload job for requests that acknowledge orders have been received. Use
     *  the <b>OrderAck</b> request to acknowledge each
     *  line item in a <b>SoldReport</b> by order ID or
     *  line item ID.
     *  <br><br>
     *  After you send the first <b>OrderAck</b> call,
     *  future <b>SoldReports</b> will only contain
     *  unacknowledged orders or line items.
     *  </dd>
     *  <dt><strong>RelistFixedPriceItem</strong></dt>
     *  <dd>
     *  Upload job for requests to re-list fixed-price (single or multi-item)
     *  listings that ended without buyers. A listing may be re-listed with the
     *  same item properties as the original or the seller may change a number of
     *  the item's defining properties at re- listing time. The new listing will
     *  have a different item ID than the original one.
     *  </dd>
     *  <dt><strong>RelistItem</strong></dt>
     *  <dd>
     *  Upload job for requests to re-list listings that ended without winning
     *  bidders or buyers. Enables a seller to take a single item (or a single
     *  multi-item listing) and re-list it on a specified eBay site.
     *  </dd>
     *  <dt><strong>ReviseFixedPriceItem</strong></dt>
     *  <dd>
     *  Upload job for requests to change the properties of a currently active
     *  listing.
     *  <br><br>
     *  If the listing contains multiple items, you can revise most of the fields
     *  in the listing (except Title, currency, product ID, photo display type,
     *  variation details, duration, format, or eBay Giving Works charity), even
     *  after one of the items in the listing has been purchased. To revise
     *  multiple listings, include a ReviseFixedPriceItemRequest once for each
     *  item or listing in your data file, with new information for each item or
     *  listing.
     *  </dd>
     *  <dt><strong>ReviseInventoryStatus</strong></dt>
     *  <dd>
     *  Upload job for requests to change the price and quantity of a currently
     *  active fixed-price listing. Inputs are the item IDs or SKUs of the
     *  listings being revised, and price and quantity that are being changed for
     *  each revision.
     *  <br><br>
     *  You can use SKU as input only for fixed-price listings that are managed
     *  by SKU (i.e., <b>InventoryTrackingMethod</b> is
     *  set to SKU). <b>ItemID</b> can be used in either
     *  case.
     *  </dd>
     *  <dt><strong>ReviseItem</strong></dt>
     *  <dd>
     *  Upload job for requests to change the properties of active listings.
     *  </dd>
     *  <dt><strong>SetShipmentTrackingInfo</strong></dt>
     *  <dd>
     *  Upload job for requests to specify the shipment tracking information
     *  associated with one package of an order.
     *  </dd>
     *  <dt><strong>SoldReport</strong></dt>
     *  <dd>
     *  Download job for a report that lists all items that have been sold by
     *  this seller (sold items that were submitted to the Large Merchant Service
     *  by the seller's application).
     *  <br><br>
     *  When an item is sold, the eBay application creates an 'order' for the
     *  seller. If only one item is sold, there is one order ID and one line item
     *  ID associated with the sale. However, if multiple items are sold as part
     *  of the same transaction, there is one order ID for the sale, and multiple
     *  line item IDs - one line item ID for each item sold.
     *  <br><br>
     *  Therefore, the Sold Report returns the order IDs and line item IDs for
     *  every order associated with the seller who is making the request. Sellers
     *  use this information to make inventory updates and start order
     *  fulfillment.
     *  <br><br>
     *  When orders have been fulfilled, the seller will probably want to remove
     *  them from the list of all orders that comes back every time they receive
     *  a SoldReport. To do this, they can acknowledge each order that has been
     *  fulfulled (using order ID or line item ID) by uploading a list of the
     *  fulfulled order information using an <b
     *  class="con">OrderAck</b> request.
     *  <br><br>
     *  After you upload a data file with an <b
     *  class="con">OrderAck</b> request, the orders (or line items
     *  within an order) will no longer appear in the <b>
     *  SoldReport</b>. (After you send the first <b>
     *  OrderAck</b> call, future <b
     *  class="con">SoldReports</b> that you request will only contain
     *  unacknowledged orders and line items.)
     *  </dd>
     *  <dt><strong>UploadSiteHostedPictures</strong></dt>
     *  <dd>
     *  Upload job for requests to upload pictures to EPS (eBay Picture
     *  Services). Each request contains a URL in the <b>
     *  ExternalPictureURL</b> field (the location of the picture on an
     *  external web server). Unlike what the call name implies, you can only
     *  upload one picture per request.
     *  </dd>
     *  <dt><strong>VerifyAddFixedPriceItem</strong></dt>
     *  <dd>
     *  Upload job for requests to test the definition of new fixed-price items
     *  by submitting them to eBay without creating a listing.
     *  </dd>
     *  <dt><strong>VerifyAddItem</strong></dt>
     *  <dd>
     *  Upload job for requests to test the definition of new items and submit
     *  the definition to eBay without creating a listing.
     *  </dd>
     *  </dl>
     *  <br><br>
     *  Recurring jobs can be established for download job types only. For <strong>getRecurringJobExecutionHistory</strong> and <strong>getRecurringJobExecutionStatus</strong>, only the following values apply:
     *  <br><br>
     *  <ul>
     *  <li>ActiveInventoryReport</li>
     *  <li>FeeSettlementReport</li>
     *  <li>SoldReport</li>
     *  </ul>
     *
     * @return string
     */
    public function getJobType()
    {
        return $this->jobType;
    }

    /**
     * Sets a new jobType
     *
     * Each of the Bulk Data Exchange job types corresponds to a Merchant Data request
     *  or response with the same name. The requests or responses are included within a
     *  data file that will be uploaded or downloaded after the job is created. For
     *  instance, if you create an <b>AddFixedPriceItem</b> job, then the file you are going
     *  to upload must contain <b>AddFixedPriceItem</b> requests - one request for each item
     *  in your data file.
     *  <br><br>
     *  Each Bulk Data Exchange job can only have one job type per job. For example, if
     *  you are uploading a data file, it can not have both <b>AddFixedPriceItem</b> requests
     *  and <b>ReviseFixedPriceItem</b> requests within the same data file.
     *  <br><br>
     *  The following value definitions describe the request or response associated
     *  with each job type.
     *  <br><br>
     *  For more information about creating and uploading Merchant Data files, see the
     *  Large Merchant Services User Guide.
     *
     *  <br><br>
     *  <dl>
     *  <dt><strong>Applicable values:</strong></dt>
     *  <dt>ActiveInventoryReport</strong></dt>
     *  <dd>
     *  Download job for a report that contains all of the active listings for a
     *  specific seller ID. The eBay servers read the credential information
     *  passed in by the seller's application to determine which seller's data to
     *  retrieve.
     *  </dd>
     *  <dt><strong>AddFixedPriceItem</strong></dt>
     *  <dd>
     *  Upload job for requests to add fixed-price items and lists it on a
     *  specified eBay site.
     *  </dd>
     *  <dt><strong>AddItem</strong></dt>
     *  <dd>
     *  Upload job for requests to Defines a single new item and lists it on a
     *  specified eBay site.
     *  </dd>
     *  <dt><strong>EndFixedPriceItem</strong></dt>
     *  <dd>
     *  Upload job for requests to end specified fixed-price item listings before
     *  the date and time at which they would normally end (per the listing
     *  duration).
     *  </dd>
     *  <dt><strong>EndItem</strong></dt>
     *  <dd>
     *  Upload job for requests to end specified item listings before the date
     *  and time at which they would normally end (per the listing duration).
     *  </dd>
     *  <dt><strong>FeeSettlementReport</strong></dt>
     *  <dd>
     *  Download job for a report that contains all of the fees the seller has
     *  incurred as invoices are generated by the eBay servers. This report gives
     *  large merchants the ability to look at their fees for many listings in
     *  one file.
     *  </dd>
     *  <dt><strong>OrderAck</strong></dt>
     *  <dd>
     *  Upload job for requests that acknowledge orders have been received. Use
     *  the <b>OrderAck</b> request to acknowledge each
     *  line item in a <b>SoldReport</b> by order ID or
     *  line item ID.
     *  <br><br>
     *  After you send the first <b>OrderAck</b> call,
     *  future <b>SoldReports</b> will only contain
     *  unacknowledged orders or line items.
     *  </dd>
     *  <dt><strong>RelistFixedPriceItem</strong></dt>
     *  <dd>
     *  Upload job for requests to re-list fixed-price (single or multi-item)
     *  listings that ended without buyers. A listing may be re-listed with the
     *  same item properties as the original or the seller may change a number of
     *  the item's defining properties at re- listing time. The new listing will
     *  have a different item ID than the original one.
     *  </dd>
     *  <dt><strong>RelistItem</strong></dt>
     *  <dd>
     *  Upload job for requests to re-list listings that ended without winning
     *  bidders or buyers. Enables a seller to take a single item (or a single
     *  multi-item listing) and re-list it on a specified eBay site.
     *  </dd>
     *  <dt><strong>ReviseFixedPriceItem</strong></dt>
     *  <dd>
     *  Upload job for requests to change the properties of a currently active
     *  listing.
     *  <br><br>
     *  If the listing contains multiple items, you can revise most of the fields
     *  in the listing (except Title, currency, product ID, photo display type,
     *  variation details, duration, format, or eBay Giving Works charity), even
     *  after one of the items in the listing has been purchased. To revise
     *  multiple listings, include a ReviseFixedPriceItemRequest once for each
     *  item or listing in your data file, with new information for each item or
     *  listing.
     *  </dd>
     *  <dt><strong>ReviseInventoryStatus</strong></dt>
     *  <dd>
     *  Upload job for requests to change the price and quantity of a currently
     *  active fixed-price listing. Inputs are the item IDs or SKUs of the
     *  listings being revised, and price and quantity that are being changed for
     *  each revision.
     *  <br><br>
     *  You can use SKU as input only for fixed-price listings that are managed
     *  by SKU (i.e., <b>InventoryTrackingMethod</b> is
     *  set to SKU). <b>ItemID</b> can be used in either
     *  case.
     *  </dd>
     *  <dt><strong>ReviseItem</strong></dt>
     *  <dd>
     *  Upload job for requests to change the properties of active listings.
     *  </dd>
     *  <dt><strong>SetShipmentTrackingInfo</strong></dt>
     *  <dd>
     *  Upload job for requests to specify the shipment tracking information
     *  associated with one package of an order.
     *  </dd>
     *  <dt><strong>SoldReport</strong></dt>
     *  <dd>
     *  Download job for a report that lists all items that have been sold by
     *  this seller (sold items that were submitted to the Large Merchant Service
     *  by the seller's application).
     *  <br><br>
     *  When an item is sold, the eBay application creates an 'order' for the
     *  seller. If only one item is sold, there is one order ID and one line item
     *  ID associated with the sale. However, if multiple items are sold as part
     *  of the same transaction, there is one order ID for the sale, and multiple
     *  line item IDs - one line item ID for each item sold.
     *  <br><br>
     *  Therefore, the Sold Report returns the order IDs and line item IDs for
     *  every order associated with the seller who is making the request. Sellers
     *  use this information to make inventory updates and start order
     *  fulfillment.
     *  <br><br>
     *  When orders have been fulfilled, the seller will probably want to remove
     *  them from the list of all orders that comes back every time they receive
     *  a SoldReport. To do this, they can acknowledge each order that has been
     *  fulfulled (using order ID or line item ID) by uploading a list of the
     *  fulfulled order information using an <b
     *  class="con">OrderAck</b> request.
     *  <br><br>
     *  After you upload a data file with an <b
     *  class="con">OrderAck</b> request, the orders (or line items
     *  within an order) will no longer appear in the <b>
     *  SoldReport</b>. (After you send the first <b>
     *  OrderAck</b> call, future <b
     *  class="con">SoldReports</b> that you request will only contain
     *  unacknowledged orders and line items.)
     *  </dd>
     *  <dt><strong>UploadSiteHostedPictures</strong></dt>
     *  <dd>
     *  Upload job for requests to upload pictures to EPS (eBay Picture
     *  Services). Each request contains a URL in the <b>
     *  ExternalPictureURL</b> field (the location of the picture on an
     *  external web server). Unlike what the call name implies, you can only
     *  upload one picture per request.
     *  </dd>
     *  <dt><strong>VerifyAddFixedPriceItem</strong></dt>
     *  <dd>
     *  Upload job for requests to test the definition of new fixed-price items
     *  by submitting them to eBay without creating a listing.
     *  </dd>
     *  <dt><strong>VerifyAddItem</strong></dt>
     *  <dd>
     *  Upload job for requests to test the definition of new items and submit
     *  the definition to eBay without creating a listing.
     *  </dd>
     *  </dl>
     *  <br><br>
     *  Recurring jobs can be established for download job types only. For <strong>getRecurringJobExecutionHistory</strong> and <strong>getRecurringJobExecutionStatus</strong>, only the following values apply:
     *  <br><br>
     *  <ul>
     *  <li>ActiveInventoryReport</li>
     *  <li>FeeSettlementReport</li>
     *  <li>SoldReport</li>
     *  </ul>
     *
     * @param string $jobType
     * @return self
     */
    public function setJobType($jobType)
    {
        $this->jobType = $jobType;
        return $this;
    }

    /**
     * Gets as jobStatus
     *
     * The current state of a Bulk Data Exchange job. This value is always returned with the <b>jobProfile</b> container.
     *
     * @return string
     */
    public function getJobStatus()
    {
        return $this->jobStatus;
    }

    /**
     * Sets a new jobStatus
     *
     * The current state of a Bulk Data Exchange job. This value is always returned with the <b>jobProfile</b> container.
     *
     * @param string $jobStatus
     * @return self
     */
    public function setJobStatus($jobStatus)
    {
        $this->jobStatus = $jobStatus;
        return $this;
    }

    /**
     * Gets as creationTime
     *
     * This timestamp indicates the date and time that the Bulk Data Exchange job was created. This value is always returned with the <b>jobProfile</b> container.
     *
     * @return \DateTime
     */
    public function getCreationTime()
    {
        return $this->creationTime;
    }

    /**
     * Sets a new creationTime
     *
     * This timestamp indicates the date and time that the Bulk Data Exchange job was created. This value is always returned with the <b>jobProfile</b> container.
     *
     * @param \DateTime $creationTime
     * @return self
     */
    public function setCreationTime(\DateTime $creationTime)
    {
        $this->creationTime = $creationTime;
        return $this;
    }

    /**
     * Gets as completionTime
     *
     * This timestamp indicates the date and time that the Bulk Data Exchange job was completed. Compare this timestamp against <strong>creationTime<strong>
     *  to determine the average processing time for your jobs. If processing of the job has not completed, this field will not be returned. The user will have to look at the <strong>percentComplete</strong> value to determine the current status of the running job.
     *
     * @return \DateTime
     */
    public function getCompletionTime()
    {
        return $this->completionTime;
    }

    /**
     * Sets a new completionTime
     *
     * This timestamp indicates the date and time that the Bulk Data Exchange job was completed. Compare this timestamp against <strong>creationTime<strong>
     *  to determine the average processing time for your jobs. If processing of the job has not completed, this field will not be returned. The user will have to look at the <strong>percentComplete</strong> value to determine the current status of the running job.
     *
     * @param \DateTime $completionTime
     * @return self
     */
    public function setCompletionTime(\DateTime $completionTime)
    {
        $this->completionTime = $completionTime;
        return $this;
    }

    /**
     * Gets as errorCount
     *
     * The number of non-fatal (informational) errors that occurred during file
     *  processing (uploads or reports) after a
     *  <strong>startUploadJobRequest</strong> or <strong>startDownloadJobRequest</strong> call.
     *
     * @return int
     */
    public function getErrorCount()
    {
        return $this->errorCount;
    }

    /**
     * Sets a new errorCount
     *
     * The number of non-fatal (informational) errors that occurred during file
     *  processing (uploads or reports) after a
     *  <strong>startUploadJobRequest</strong> or <strong>startDownloadJobRequest</strong> call.
     *
     * @param int $errorCount
     * @return self
     */
    public function setErrorCount($errorCount)
    {
        $this->errorCount = $errorCount;
        return $this;
    }

    /**
     * Gets as percentComplete
     *
     * The percentage of your file that has been processed after <strong>startUploadJobRequest</strong> or <strong>startDownloadJobRequest</strong> call. This value is always returned with the <b>jobProfile</b> container whether the job is still in progress or complete. If the job is complete, the value of this field will be '100.0'.
     *
     * @return float
     */
    public function getPercentComplete()
    {
        return $this->percentComplete;
    }

    /**
     * Sets a new percentComplete
     *
     * The percentage of your file that has been processed after <strong>startUploadJobRequest</strong> or <strong>startDownloadJobRequest</strong> call. This value is always returned with the <b>jobProfile</b> container whether the job is still in progress or complete. If the job is complete, the value of this field will be '100.0'.
     *
     * @param float $percentComplete
     * @return self
     */
    public function setPercentComplete($percentComplete)
    {
        $this->percentComplete = $percentComplete;
        return $this;
    }

    /**
     * Gets as fileReferenceId
     *
     * A unique ID assigned to a file by the Bulk Data Exchange API. This value will be passed into the <b>fileReferenceId</b> field in the File Transfer API's <b>uploadFile</b> call.
     *  <br><br>
     *  If a job has not completed processing, only the <b>inputFileReferenceId</b> value (from the <b>createUploadJob</b> response) will be returned. Once the upload job has finished processing, a new <b>fileReferenceId</b> is assigned by the Bulk Data Exchange API and returned by the job status calls.
     *
     * @return string
     */
    public function getFileReferenceId()
    {
        return $this->fileReferenceId;
    }

    /**
     * Sets a new fileReferenceId
     *
     * A unique ID assigned to a file by the Bulk Data Exchange API. This value will be passed into the <b>fileReferenceId</b> field in the File Transfer API's <b>uploadFile</b> call.
     *  <br><br>
     *  If a job has not completed processing, only the <b>inputFileReferenceId</b> value (from the <b>createUploadJob</b> response) will be returned. Once the upload job has finished processing, a new <b>fileReferenceId</b> is assigned by the Bulk Data Exchange API and returned by the job status calls.
     *
     * @param string $fileReferenceId
     * @return self
     */
    public function setFileReferenceId($fileReferenceId)
    {
        $this->fileReferenceId = $fileReferenceId;
        return $this;
    }

    /**
     * Gets as inputFileReferenceId
     *
     * A unique ID that references the input data file for a job that is created via <b>createUploadJob</b>. This field preserves the original <b>fileReferenceId</b> value for an upload job. Once the data file has been uploaded and the upload job has finished processing, a new <b>fileReferenceId</b> value is assigned by the Bulk Data Exchange API for downloading the corresponding responses. This value is always returned with the <b>jobProfile</b> container.
     *
     * @return string
     */
    public function getInputFileReferenceId()
    {
        return $this->inputFileReferenceId;
    }

    /**
     * Sets a new inputFileReferenceId
     *
     * A unique ID that references the input data file for a job that is created via <b>createUploadJob</b>. This field preserves the original <b>fileReferenceId</b> value for an upload job. Once the data file has been uploaded and the upload job has finished processing, a new <b>fileReferenceId</b> value is assigned by the Bulk Data Exchange API for downloading the corresponding responses. This value is always returned with the <b>jobProfile</b> container.
     *
     * @param string $inputFileReferenceId
     * @return self
     */
    public function setInputFileReferenceId($inputFileReferenceId)
    {
        $this->inputFileReferenceId = $inputFileReferenceId;
        return $this;
    }

    /**
     * Gets as startTime
     *
     * The <b>startTime</b> and <b>endTime</b> date range filters are used to restrict jobs retrieved in the response to those executed within the specified date range.
     *
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->startTime;
    }

    /**
     * Sets a new startTime
     *
     * The <b>startTime</b> and <b>endTime</b> date range filters are used to restrict jobs retrieved in the response to those executed within the specified date range.
     *
     * @param \DateTime $startTime
     * @return self
     */
    public function setStartTime(\DateTime $startTime)
    {
        $this->startTime = $startTime;
        return $this;
    }

    public function xmlSerialize(\Sabre\Xml\Writer $writer): void
    {
        $writer->writeAttribute("xmlns", "http://www.ebay.com/marketplace/services");
        $value = $this->getJobId();
        if (null !== $value) {
            $writer->writeElement("{http://www.ebay.com/marketplace/services}jobId", $value);
        }
        $value = $this->getJobType();
        if (null !== $value) {
            $writer->writeElement("{http://www.ebay.com/marketplace/services}jobType", $value);
        }
        $value = $this->getJobStatus();
        if (null !== $value) {
            $writer->writeElement("{http://www.ebay.com/marketplace/services}jobStatus", $value);
        }
        $value = $this->getCreationTime();
        if (null !== $value) {
            $writer->writeElement("{http://www.ebay.com/marketplace/services}creationTime", $value);
        }
        $value = $this->getCompletionTime();
        if (null !== $value) {
            $writer->writeElement("{http://www.ebay.com/marketplace/services}completionTime", $value);
        }
        $value = $this->getErrorCount();
        if (null !== $value) {
            $writer->writeElement("{http://www.ebay.com/marketplace/services}errorCount", $value);
        }
        $value = $this->getPercentComplete();
        if (null !== $value) {
            $writer->writeElement("{http://www.ebay.com/marketplace/services}percentComplete", $value);
        }
        $value = $this->getFileReferenceId();
        if (null !== $value) {
            $writer->writeElement("{http://www.ebay.com/marketplace/services}fileReferenceId", $value);
        }
        $value = $this->getInputFileReferenceId();
        if (null !== $value) {
            $writer->writeElement("{http://www.ebay.com/marketplace/services}inputFileReferenceId", $value);
        }
        $value = $this->getStartTime();
        if (null !== $value) {
            $writer->writeElement("{http://www.ebay.com/marketplace/services}startTime", $value);
        }
    }

    public static function xmlDeserialize(\Sabre\Xml\Reader $reader)
    {
        return self::fromKeyValue($reader->parseInnerTree([]));
    }

    public static function fromKeyValue($keyValue)
    {
        $self = new self();
        $self->setKeyValue($keyValue);
        return $self;
    }

    public function setKeyValue($keyValue)
    {
        $value = Func::mapArray($keyValue, '{http://www.ebay.com/marketplace/services}jobId');
        if (null !== $value) {
            $this->setJobId($value);
        }
        $value = Func::mapArray($keyValue, '{http://www.ebay.com/marketplace/services}jobType');
        if (null !== $value) {
            $this->setJobType($value);
        }
        $value = Func::mapArray($keyValue, '{http://www.ebay.com/marketplace/services}jobStatus');
        if (null !== $value) {
            $this->setJobStatus($value);
        }
        $value = Func::mapArray($keyValue, '{http://www.ebay.com/marketplace/services}creationTime');
        if (null !== $value) {
            $this->setCreationTime(new \DateTime($value));
        }
        $value = Func::mapArray($keyValue, '{http://www.ebay.com/marketplace/services}completionTime');
        if (null !== $value) {
            $this->setCompletionTime(new \DateTime($value));
        }
        $value = Func::mapArray($keyValue, '{http://www.ebay.com/marketplace/services}errorCount');
        if (null !== $value) {
            $this->setErrorCount($value);
        }
        $value = Func::mapArray($keyValue, '{http://www.ebay.com/marketplace/services}percentComplete');
        if (null !== $value) {
            $this->setPercentComplete($value);
        }
        $value = Func::mapArray($keyValue, '{http://www.ebay.com/marketplace/services}fileReferenceId');
        if (null !== $value) {
            $this->setFileReferenceId($value);
        }
        $value = Func::mapArray($keyValue, '{http://www.ebay.com/marketplace/services}inputFileReferenceId');
        if (null !== $value) {
            $this->setInputFileReferenceId($value);
        }
        $value = Func::mapArray($keyValue, '{http://www.ebay.com/marketplace/services}startTime');
        if (null !== $value) {
            $this->setStartTime(new \DateTime($value));
        }
    }
}
