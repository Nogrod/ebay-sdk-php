<?php

namespace Nogrod\eBaySDK\Trading;

use Nogrod\XMLClientRuntime\Func;

/**
 * Class representing AddOrderResponseType
 *
 * This type defines the response of an <b>AddOrder</b> call. If the multiple line items are successfully combined into a single order, this response includes the unique identifier of this 'Combined Invoice' order (automatically generated by eBay), and a timestamp indicating when the new order was created.
 * XSD Type: AddOrderResponseType
 */
class AddOrderResponseType extends AbstractResponseType
{
    /**
     * The unique identifier of the successfully-created 'Combined Invoice' order. This value is only created and returned if the <b>AddOrder</b> call is successful in creating the new order.
     *  <br/><br/>
     *  This value can be used as an input filter in <b>GetOrders</b> calls to retrieve the 'Combined Invoice' order.
     *  <br><br>
     *  <span class="tablenote"><b>Note: </b> This unique identifier is not the same as the <b>OrderID</b> that is generated after payment.
     *  </span>
     *
     * @var string $orderID
     */
    private $orderID = null;

    /**
     * Timestamp that indicates the date and time that the 'Combined Invoice' order was created.
     *
     * @var \DateTime $createdTime
     */
    private $createdTime = null;

    /**
     * Gets as orderID
     *
     * The unique identifier of the successfully-created 'Combined Invoice' order. This value is only created and returned if the <b>AddOrder</b> call is successful in creating the new order.
     *  <br/><br/>
     *  This value can be used as an input filter in <b>GetOrders</b> calls to retrieve the 'Combined Invoice' order.
     *  <br><br>
     *  <span class="tablenote"><b>Note: </b> This unique identifier is not the same as the <b>OrderID</b> that is generated after payment.
     *  </span>
     *
     * @return string
     */
    public function getOrderID()
    {
        return $this->orderID;
    }

    /**
     * Sets a new orderID
     *
     * The unique identifier of the successfully-created 'Combined Invoice' order. This value is only created and returned if the <b>AddOrder</b> call is successful in creating the new order.
     *  <br/><br/>
     *  This value can be used as an input filter in <b>GetOrders</b> calls to retrieve the 'Combined Invoice' order.
     *  <br><br>
     *  <span class="tablenote"><b>Note: </b> This unique identifier is not the same as the <b>OrderID</b> that is generated after payment.
     *  </span>
     *
     * @param string $orderID
     * @return self
     */
    public function setOrderID($orderID)
    {
        $this->orderID = $orderID;
        return $this;
    }

    /**
     * Gets as createdTime
     *
     * Timestamp that indicates the date and time that the 'Combined Invoice' order was created.
     *
     * @return \DateTime
     */
    public function getCreatedTime()
    {
        return $this->createdTime;
    }

    /**
     * Sets a new createdTime
     *
     * Timestamp that indicates the date and time that the 'Combined Invoice' order was created.
     *
     * @param \DateTime $createdTime
     * @return self
     */
    public function setCreatedTime(\DateTime $createdTime)
    {
        $this->createdTime = $createdTime;
        return $this;
    }

    public function xmlSerialize(\Sabre\Xml\Writer $writer): void
    {
        parent::xmlSerialize($writer);
        $value = $this->getOrderID();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}OrderID", $value);
        }
        $value = $this->getCreatedTime();
        if (null !== $value) {
            $writer->writeElement("{urn:ebay:apis:eBLBaseComponents}CreatedTime", $value);
        }
    }

    public static function xmlDeserialize(\Sabre\Xml\Reader $reader): mixed
    {
        return self::fromKeyValue($reader->parseInnerTree([]));
    }

    public static function fromKeyValue($keyValue): \Nogrod\eBaySDK\Trading\AddOrderResponseType
    {
        $self = new self();
        $self->setKeyValue($keyValue);
        return $self;
    }

    public function setKeyValue($keyValue): void
    {
        parent::setKeyValue($keyValue);
        $value = Func::mapValue($keyValue, '{urn:ebay:apis:eBLBaseComponents}OrderID');
        if (null !== $value) {
            $this->setOrderID($value);
        }
        $value = Func::mapValue($keyValue, '{urn:ebay:apis:eBLBaseComponents}CreatedTime');
        if (null !== $value) {
            $this->setCreatedTime(new \DateTime($value));
        }
    }
}
